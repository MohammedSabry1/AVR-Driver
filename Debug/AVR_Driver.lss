
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001bc  00800060  00002302  00002396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080021c  0080021c  00002552  2**0
                  ALLOC
  3 .stab         00004ce0  00000000  00000000  00002554  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019ac  00000000  00000000  00007234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  00008d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b11  00000000  00000000  00008eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ebc  00000000  00000000  0000a9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e5b  00000000  00000000  0000b884  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c6e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002b1  00000000  00000000  0000c840  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000836  00000000  00000000  0000caf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d327  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__vector_10>
      2c:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 33       	cpi	r26, 0x36	; 54
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 10 	call	0x207e	; 0x207e <main>
      8a:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 19 03 	call	0x632	; 0x632 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ef       	ldi	r26, 0xF3	; 243
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ef       	ldi	r24, 0xF3	; 243
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__epilogue_restores__>

00000632 <__gesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gesf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__epilogue_restores__+0x18>

00000692 <__fixsfsi>:
     692:	ac e0       	ldi	r26, 0x0C	; 12
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__prologue_saves__+0x20>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	be 01       	movw	r22, r28
     6ac:	6b 5f       	subi	r22, 0xFB	; 251
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     6b4:	8d 81       	ldd	r24, Y+5	; 0x05
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	61 f1       	breq	.+88     	; 0x712 <__fixsfsi+0x80>
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	50 f1       	brcs	.+84     	; 0x712 <__fixsfsi+0x80>
     6be:	84 30       	cpi	r24, 0x04	; 4
     6c0:	21 f4       	brne	.+8      	; 0x6ca <__fixsfsi+0x38>
     6c2:	8e 81       	ldd	r24, Y+6	; 0x06
     6c4:	88 23       	and	r24, r24
     6c6:	51 f1       	breq	.+84     	; 0x71c <__fixsfsi+0x8a>
     6c8:	2e c0       	rjmp	.+92     	; 0x726 <__fixsfsi+0x94>
     6ca:	2f 81       	ldd	r18, Y+7	; 0x07
     6cc:	38 85       	ldd	r19, Y+8	; 0x08
     6ce:	37 fd       	sbrc	r19, 7
     6d0:	20 c0       	rjmp	.+64     	; 0x712 <__fixsfsi+0x80>
     6d2:	6e 81       	ldd	r22, Y+6	; 0x06
     6d4:	2f 31       	cpi	r18, 0x1F	; 31
     6d6:	31 05       	cpc	r19, r1
     6d8:	1c f0       	brlt	.+6      	; 0x6e0 <__fixsfsi+0x4e>
     6da:	66 23       	and	r22, r22
     6dc:	f9 f0       	breq	.+62     	; 0x71c <__fixsfsi+0x8a>
     6de:	23 c0       	rjmp	.+70     	; 0x726 <__fixsfsi+0x94>
     6e0:	8e e1       	ldi	r24, 0x1E	; 30
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	82 1b       	sub	r24, r18
     6e6:	93 0b       	sbc	r25, r19
     6e8:	29 85       	ldd	r18, Y+9	; 0x09
     6ea:	3a 85       	ldd	r19, Y+10	; 0x0a
     6ec:	4b 85       	ldd	r20, Y+11	; 0x0b
     6ee:	5c 85       	ldd	r21, Y+12	; 0x0c
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <__fixsfsi+0x68>
     6f2:	56 95       	lsr	r21
     6f4:	47 95       	ror	r20
     6f6:	37 95       	ror	r19
     6f8:	27 95       	ror	r18
     6fa:	8a 95       	dec	r24
     6fc:	d2 f7       	brpl	.-12     	; 0x6f2 <__fixsfsi+0x60>
     6fe:	66 23       	and	r22, r22
     700:	b1 f0       	breq	.+44     	; 0x72e <__fixsfsi+0x9c>
     702:	50 95       	com	r21
     704:	40 95       	com	r20
     706:	30 95       	com	r19
     708:	21 95       	neg	r18
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	4f 4f       	sbci	r20, 0xFF	; 255
     70e:	5f 4f       	sbci	r21, 0xFF	; 255
     710:	0e c0       	rjmp	.+28     	; 0x72e <__fixsfsi+0x9c>
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	09 c0       	rjmp	.+18     	; 0x72e <__fixsfsi+0x9c>
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	3f ef       	ldi	r19, 0xFF	; 255
     720:	4f ef       	ldi	r20, 0xFF	; 255
     722:	5f e7       	ldi	r21, 0x7F	; 127
     724:	04 c0       	rjmp	.+8      	; 0x72e <__fixsfsi+0x9c>
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e8       	ldi	r21, 0x80	; 128
     72e:	b9 01       	movw	r22, r18
     730:	ca 01       	movw	r24, r20
     732:	2c 96       	adiw	r28, 0x0c	; 12
     734:	e2 e0       	ldi	r30, 0x02	; 2
     736:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__epilogue_restores__+0x20>

0000073a <__floatunsisf>:
     73a:	a8 e0       	ldi	r26, 0x08	; 8
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	e3 ea       	ldi	r30, 0xA3	; 163
     740:	f3 e0       	ldi	r31, 0x03	; 3
     742:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__prologue_saves__+0x10>
     746:	7b 01       	movw	r14, r22
     748:	8c 01       	movw	r16, r24
     74a:	61 15       	cp	r22, r1
     74c:	71 05       	cpc	r23, r1
     74e:	81 05       	cpc	r24, r1
     750:	91 05       	cpc	r25, r1
     752:	19 f4       	brne	.+6      	; 0x75a <__floatunsisf+0x20>
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	60 c0       	rjmp	.+192    	; 0x81a <__floatunsisf+0xe0>
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	89 83       	std	Y+1, r24	; 0x01
     75e:	8e e1       	ldi	r24, 0x1E	; 30
     760:	c8 2e       	mov	r12, r24
     762:	d1 2c       	mov	r13, r1
     764:	dc 82       	std	Y+4, r13	; 0x04
     766:	cb 82       	std	Y+3, r12	; 0x03
     768:	ed 82       	std	Y+5, r14	; 0x05
     76a:	fe 82       	std	Y+6, r15	; 0x06
     76c:	0f 83       	std	Y+7, r16	; 0x07
     76e:	18 87       	std	Y+8, r17	; 0x08
     770:	c8 01       	movw	r24, r16
     772:	b7 01       	movw	r22, r14
     774:	0e 94 16 04 	call	0x82c	; 0x82c <__clzsi2>
     778:	fc 01       	movw	r30, r24
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	f7 ff       	sbrs	r31, 7
     77e:	3b c0       	rjmp	.+118    	; 0x7f6 <__floatunsisf+0xbc>
     780:	22 27       	eor	r18, r18
     782:	33 27       	eor	r19, r19
     784:	2e 1b       	sub	r18, r30
     786:	3f 0b       	sbc	r19, r31
     788:	57 01       	movw	r10, r14
     78a:	68 01       	movw	r12, r16
     78c:	02 2e       	mov	r0, r18
     78e:	04 c0       	rjmp	.+8      	; 0x798 <__floatunsisf+0x5e>
     790:	d6 94       	lsr	r13
     792:	c7 94       	ror	r12
     794:	b7 94       	ror	r11
     796:	a7 94       	ror	r10
     798:	0a 94       	dec	r0
     79a:	d2 f7       	brpl	.-12     	; 0x790 <__floatunsisf+0x56>
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__floatunsisf+0x7c>
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	aa 1f       	adc	r26, r26
     7b4:	bb 1f       	adc	r27, r27
     7b6:	2a 95       	dec	r18
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <__floatunsisf+0x74>
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	a1 09       	sbc	r26, r1
     7be:	b1 09       	sbc	r27, r1
     7c0:	8e 21       	and	r24, r14
     7c2:	9f 21       	and	r25, r15
     7c4:	a0 23       	and	r26, r16
     7c6:	b1 23       	and	r27, r17
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	a1 05       	cpc	r26, r1
     7cc:	b1 05       	cpc	r27, r1
     7ce:	21 f0       	breq	.+8      	; 0x7d8 <__floatunsisf+0x9e>
     7d0:	41 e0       	ldi	r20, 0x01	; 1
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	4a 29       	or	r20, r10
     7da:	5b 29       	or	r21, r11
     7dc:	6c 29       	or	r22, r12
     7de:	7d 29       	or	r23, r13
     7e0:	4d 83       	std	Y+5, r20	; 0x05
     7e2:	5e 83       	std	Y+6, r21	; 0x06
     7e4:	6f 83       	std	Y+7, r22	; 0x07
     7e6:	78 87       	std	Y+8, r23	; 0x08
     7e8:	8e e1       	ldi	r24, 0x1E	; 30
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	8e 1b       	sub	r24, r30
     7ee:	9f 0b       	sbc	r25, r31
     7f0:	9c 83       	std	Y+4, r25	; 0x04
     7f2:	8b 83       	std	Y+3, r24	; 0x03
     7f4:	12 c0       	rjmp	.+36     	; 0x81a <__floatunsisf+0xe0>
     7f6:	30 97       	sbiw	r30, 0x00	; 0
     7f8:	81 f0       	breq	.+32     	; 0x81a <__floatunsisf+0xe0>
     7fa:	0e 2e       	mov	r0, r30
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <__floatunsisf+0xcc>
     7fe:	ee 0c       	add	r14, r14
     800:	ff 1c       	adc	r15, r15
     802:	00 1f       	adc	r16, r16
     804:	11 1f       	adc	r17, r17
     806:	0a 94       	dec	r0
     808:	d2 f7       	brpl	.-12     	; 0x7fe <__floatunsisf+0xc4>
     80a:	ed 82       	std	Y+5, r14	; 0x05
     80c:	fe 82       	std	Y+6, r15	; 0x06
     80e:	0f 83       	std	Y+7, r16	; 0x07
     810:	18 87       	std	Y+8, r17	; 0x08
     812:	ce 1a       	sub	r12, r30
     814:	df 0a       	sbc	r13, r31
     816:	dc 82       	std	Y+4, r13	; 0x04
     818:	cb 82       	std	Y+3, r12	; 0x03
     81a:	1a 82       	std	Y+2, r1	; 0x02
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     824:	28 96       	adiw	r28, 0x08	; 8
     826:	ea e0       	ldi	r30, 0x0A	; 10
     828:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <__epilogue_restores__+0x10>

0000082c <__clzsi2>:
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	7b 01       	movw	r14, r22
     836:	8c 01       	movw	r16, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	e8 16       	cp	r14, r24
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	f8 06       	cpc	r15, r24
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	08 07       	cpc	r16, r24
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	18 07       	cpc	r17, r24
     848:	88 f4       	brcc	.+34     	; 0x86c <__stack+0xd>
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	e8 16       	cp	r14, r24
     84e:	f1 04       	cpc	r15, r1
     850:	01 05       	cpc	r16, r1
     852:	11 05       	cpc	r17, r1
     854:	31 f0       	breq	.+12     	; 0x862 <__stack+0x3>
     856:	28 f0       	brcs	.+10     	; 0x862 <__stack+0x3>
     858:	88 e0       	ldi	r24, 0x08	; 8
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	a0 e0       	ldi	r26, 0x00	; 0
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	17 c0       	rjmp	.+46     	; 0x890 <__stack+0x31>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	a0 e0       	ldi	r26, 0x00	; 0
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	12 c0       	rjmp	.+36     	; 0x890 <__stack+0x31>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	e8 16       	cp	r14, r24
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	f8 06       	cpc	r15, r24
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	08 07       	cpc	r16, r24
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	18 07       	cpc	r17, r24
     87c:	28 f0       	brcs	.+10     	; 0x888 <__stack+0x29>
     87e:	88 e1       	ldi	r24, 0x18	; 24
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	04 c0       	rjmp	.+8      	; 0x890 <__stack+0x31>
     888:	80 e1       	ldi	r24, 0x10	; 16
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	20 e2       	ldi	r18, 0x20	; 32
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	28 1b       	sub	r18, r24
     89a:	39 0b       	sbc	r19, r25
     89c:	4a 0b       	sbc	r20, r26
     89e:	5b 0b       	sbc	r21, r27
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	16 95       	lsr	r17
     8a4:	07 95       	ror	r16
     8a6:	f7 94       	ror	r15
     8a8:	e7 94       	ror	r14
     8aa:	8a 95       	dec	r24
     8ac:	d2 f7       	brpl	.-12     	; 0x8a2 <__stack+0x43>
     8ae:	f7 01       	movw	r30, r14
     8b0:	e5 50       	subi	r30, 0x05	; 5
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	80 81       	ld	r24, Z
     8b6:	28 1b       	sub	r18, r24
     8b8:	31 09       	sbc	r19, r1
     8ba:	41 09       	sbc	r20, r1
     8bc:	51 09       	sbc	r21, r1
     8be:	c9 01       	movw	r24, r18
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	08 95       	ret

000008ca <__pack_f>:
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	fc 01       	movw	r30, r24
     8d6:	e4 80       	ldd	r14, Z+4	; 0x04
     8d8:	f5 80       	ldd	r15, Z+5	; 0x05
     8da:	06 81       	ldd	r16, Z+6	; 0x06
     8dc:	17 81       	ldd	r17, Z+7	; 0x07
     8de:	d1 80       	ldd	r13, Z+1	; 0x01
     8e0:	80 81       	ld	r24, Z
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	48 f4       	brcc	.+18     	; 0x8f8 <__pack_f+0x2e>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	a0 e1       	ldi	r26, 0x10	; 16
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
     8ee:	e8 2a       	or	r14, r24
     8f0:	f9 2a       	or	r15, r25
     8f2:	0a 2b       	or	r16, r26
     8f4:	1b 2b       	or	r17, r27
     8f6:	a5 c0       	rjmp	.+330    	; 0xa42 <__pack_f+0x178>
     8f8:	84 30       	cpi	r24, 0x04	; 4
     8fa:	09 f4       	brne	.+2      	; 0x8fe <__pack_f+0x34>
     8fc:	9f c0       	rjmp	.+318    	; 0xa3c <__pack_f+0x172>
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	21 f4       	brne	.+8      	; 0x90a <__pack_f+0x40>
     902:	ee 24       	eor	r14, r14
     904:	ff 24       	eor	r15, r15
     906:	87 01       	movw	r16, r14
     908:	05 c0       	rjmp	.+10     	; 0x914 <__pack_f+0x4a>
     90a:	e1 14       	cp	r14, r1
     90c:	f1 04       	cpc	r15, r1
     90e:	01 05       	cpc	r16, r1
     910:	11 05       	cpc	r17, r1
     912:	19 f4       	brne	.+6      	; 0x91a <__pack_f+0x50>
     914:	e0 e0       	ldi	r30, 0x00	; 0
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	96 c0       	rjmp	.+300    	; 0xa46 <__pack_f+0x17c>
     91a:	62 81       	ldd	r22, Z+2	; 0x02
     91c:	73 81       	ldd	r23, Z+3	; 0x03
     91e:	9f ef       	ldi	r25, 0xFF	; 255
     920:	62 38       	cpi	r22, 0x82	; 130
     922:	79 07       	cpc	r23, r25
     924:	0c f0       	brlt	.+2      	; 0x928 <__pack_f+0x5e>
     926:	5b c0       	rjmp	.+182    	; 0x9de <__pack_f+0x114>
     928:	22 e8       	ldi	r18, 0x82	; 130
     92a:	3f ef       	ldi	r19, 0xFF	; 255
     92c:	26 1b       	sub	r18, r22
     92e:	37 0b       	sbc	r19, r23
     930:	2a 31       	cpi	r18, 0x1A	; 26
     932:	31 05       	cpc	r19, r1
     934:	2c f0       	brlt	.+10     	; 0x940 <__pack_f+0x76>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	2a c0       	rjmp	.+84     	; 0x994 <__pack_f+0xca>
     940:	b8 01       	movw	r22, r16
     942:	a7 01       	movw	r20, r14
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__pack_f+0x86>
     948:	76 95       	lsr	r23
     94a:	67 95       	ror	r22
     94c:	57 95       	ror	r21
     94e:	47 95       	ror	r20
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__pack_f+0x7e>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a0 e0       	ldi	r26, 0x00	; 0
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	04 c0       	rjmp	.+8      	; 0x966 <__pack_f+0x9c>
     95e:	88 0f       	add	r24, r24
     960:	99 1f       	adc	r25, r25
     962:	aa 1f       	adc	r26, r26
     964:	bb 1f       	adc	r27, r27
     966:	2a 95       	dec	r18
     968:	d2 f7       	brpl	.-12     	; 0x95e <__pack_f+0x94>
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	a1 09       	sbc	r26, r1
     96e:	b1 09       	sbc	r27, r1
     970:	8e 21       	and	r24, r14
     972:	9f 21       	and	r25, r15
     974:	a0 23       	and	r26, r16
     976:	b1 23       	and	r27, r17
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	a1 05       	cpc	r26, r1
     97c:	b1 05       	cpc	r27, r1
     97e:	21 f0       	breq	.+8      	; 0x988 <__pack_f+0xbe>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	9a 01       	movw	r18, r20
     98a:	ab 01       	movw	r20, r22
     98c:	28 2b       	or	r18, r24
     98e:	39 2b       	or	r19, r25
     990:	4a 2b       	or	r20, r26
     992:	5b 2b       	or	r21, r27
     994:	da 01       	movw	r26, r20
     996:	c9 01       	movw	r24, r18
     998:	8f 77       	andi	r24, 0x7F	; 127
     99a:	90 70       	andi	r25, 0x00	; 0
     99c:	a0 70       	andi	r26, 0x00	; 0
     99e:	b0 70       	andi	r27, 0x00	; 0
     9a0:	80 34       	cpi	r24, 0x40	; 64
     9a2:	91 05       	cpc	r25, r1
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	39 f4       	brne	.+14     	; 0x9b8 <__pack_f+0xee>
     9aa:	27 ff       	sbrs	r18, 7
     9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <__pack_f+0xf6>
     9ae:	20 5c       	subi	r18, 0xC0	; 192
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	4f 4f       	sbci	r20, 0xFF	; 255
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <__pack_f+0xf6>
     9b8:	21 5c       	subi	r18, 0xC1	; 193
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	4f 4f       	sbci	r20, 0xFF	; 255
     9be:	5f 4f       	sbci	r21, 0xFF	; 255
     9c0:	e0 e0       	ldi	r30, 0x00	; 0
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	20 30       	cpi	r18, 0x00	; 0
     9c6:	a0 e0       	ldi	r26, 0x00	; 0
     9c8:	3a 07       	cpc	r19, r26
     9ca:	a0 e0       	ldi	r26, 0x00	; 0
     9cc:	4a 07       	cpc	r20, r26
     9ce:	a0 e4       	ldi	r26, 0x40	; 64
     9d0:	5a 07       	cpc	r21, r26
     9d2:	10 f0       	brcs	.+4      	; 0x9d8 <__pack_f+0x10e>
     9d4:	e1 e0       	ldi	r30, 0x01	; 1
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	79 01       	movw	r14, r18
     9da:	8a 01       	movw	r16, r20
     9dc:	27 c0       	rjmp	.+78     	; 0xa2c <__pack_f+0x162>
     9de:	60 38       	cpi	r22, 0x80	; 128
     9e0:	71 05       	cpc	r23, r1
     9e2:	64 f5       	brge	.+88     	; 0xa3c <__pack_f+0x172>
     9e4:	fb 01       	movw	r30, r22
     9e6:	e1 58       	subi	r30, 0x81	; 129
     9e8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ea:	d8 01       	movw	r26, r16
     9ec:	c7 01       	movw	r24, r14
     9ee:	8f 77       	andi	r24, 0x7F	; 127
     9f0:	90 70       	andi	r25, 0x00	; 0
     9f2:	a0 70       	andi	r26, 0x00	; 0
     9f4:	b0 70       	andi	r27, 0x00	; 0
     9f6:	80 34       	cpi	r24, 0x40	; 64
     9f8:	91 05       	cpc	r25, r1
     9fa:	a1 05       	cpc	r26, r1
     9fc:	b1 05       	cpc	r27, r1
     9fe:	39 f4       	brne	.+14     	; 0xa0e <__pack_f+0x144>
     a00:	e7 fe       	sbrs	r14, 7
     a02:	0d c0       	rjmp	.+26     	; 0xa1e <__pack_f+0x154>
     a04:	80 e4       	ldi	r24, 0x40	; 64
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x14c>
     a0e:	8f e3       	ldi	r24, 0x3F	; 63
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	e8 0e       	add	r14, r24
     a18:	f9 1e       	adc	r15, r25
     a1a:	0a 1f       	adc	r16, r26
     a1c:	1b 1f       	adc	r17, r27
     a1e:	17 ff       	sbrs	r17, 7
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <__pack_f+0x162>
     a22:	16 95       	lsr	r17
     a24:	07 95       	ror	r16
     a26:	f7 94       	ror	r15
     a28:	e7 94       	ror	r14
     a2a:	31 96       	adiw	r30, 0x01	; 1
     a2c:	87 e0       	ldi	r24, 0x07	; 7
     a2e:	16 95       	lsr	r17
     a30:	07 95       	ror	r16
     a32:	f7 94       	ror	r15
     a34:	e7 94       	ror	r14
     a36:	8a 95       	dec	r24
     a38:	d1 f7       	brne	.-12     	; 0xa2e <__pack_f+0x164>
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <__pack_f+0x17c>
     a3c:	ee 24       	eor	r14, r14
     a3e:	ff 24       	eor	r15, r15
     a40:	87 01       	movw	r16, r14
     a42:	ef ef       	ldi	r30, 0xFF	; 255
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	6e 2f       	mov	r22, r30
     a48:	67 95       	ror	r22
     a4a:	66 27       	eor	r22, r22
     a4c:	67 95       	ror	r22
     a4e:	90 2f       	mov	r25, r16
     a50:	9f 77       	andi	r25, 0x7F	; 127
     a52:	d7 94       	ror	r13
     a54:	dd 24       	eor	r13, r13
     a56:	d7 94       	ror	r13
     a58:	8e 2f       	mov	r24, r30
     a5a:	86 95       	lsr	r24
     a5c:	49 2f       	mov	r20, r25
     a5e:	46 2b       	or	r20, r22
     a60:	58 2f       	mov	r21, r24
     a62:	5d 29       	or	r21, r13
     a64:	b7 01       	movw	r22, r14
     a66:	ca 01       	movw	r24, r20
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	08 95       	ret

00000a74 <__unpack_f>:
     a74:	fc 01       	movw	r30, r24
     a76:	db 01       	movw	r26, r22
     a78:	40 81       	ld	r20, Z
     a7a:	51 81       	ldd	r21, Z+1	; 0x01
     a7c:	22 81       	ldd	r18, Z+2	; 0x02
     a7e:	62 2f       	mov	r22, r18
     a80:	6f 77       	andi	r22, 0x7F	; 127
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	22 1f       	adc	r18, r18
     a86:	22 27       	eor	r18, r18
     a88:	22 1f       	adc	r18, r18
     a8a:	93 81       	ldd	r25, Z+3	; 0x03
     a8c:	89 2f       	mov	r24, r25
     a8e:	88 0f       	add	r24, r24
     a90:	82 2b       	or	r24, r18
     a92:	28 2f       	mov	r18, r24
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	99 1f       	adc	r25, r25
     a98:	99 27       	eor	r25, r25
     a9a:	99 1f       	adc	r25, r25
     a9c:	11 96       	adiw	r26, 0x01	; 1
     a9e:	9c 93       	st	X, r25
     aa0:	11 97       	sbiw	r26, 0x01	; 1
     aa2:	21 15       	cp	r18, r1
     aa4:	31 05       	cpc	r19, r1
     aa6:	a9 f5       	brne	.+106    	; 0xb12 <__unpack_f+0x9e>
     aa8:	41 15       	cp	r20, r1
     aaa:	51 05       	cpc	r21, r1
     aac:	61 05       	cpc	r22, r1
     aae:	71 05       	cpc	r23, r1
     ab0:	11 f4       	brne	.+4      	; 0xab6 <__unpack_f+0x42>
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	37 c0       	rjmp	.+110    	; 0xb24 <__unpack_f+0xb0>
     ab6:	82 e8       	ldi	r24, 0x82	; 130
     ab8:	9f ef       	ldi	r25, 0xFF	; 255
     aba:	13 96       	adiw	r26, 0x03	; 3
     abc:	9c 93       	st	X, r25
     abe:	8e 93       	st	-X, r24
     ac0:	12 97       	sbiw	r26, 0x02	; 2
     ac2:	9a 01       	movw	r18, r20
     ac4:	ab 01       	movw	r20, r22
     ac6:	67 e0       	ldi	r22, 0x07	; 7
     ac8:	22 0f       	add	r18, r18
     aca:	33 1f       	adc	r19, r19
     acc:	44 1f       	adc	r20, r20
     ace:	55 1f       	adc	r21, r21
     ad0:	6a 95       	dec	r22
     ad2:	d1 f7       	brne	.-12     	; 0xac8 <__unpack_f+0x54>
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	8c 93       	st	X, r24
     ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <__unpack_f+0x80>
     ada:	22 0f       	add	r18, r18
     adc:	33 1f       	adc	r19, r19
     ade:	44 1f       	adc	r20, r20
     ae0:	55 1f       	adc	r21, r21
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	8d 91       	ld	r24, X+
     ae6:	9c 91       	ld	r25, X
     ae8:	13 97       	sbiw	r26, 0x03	; 3
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	13 96       	adiw	r26, 0x03	; 3
     aee:	9c 93       	st	X, r25
     af0:	8e 93       	st	-X, r24
     af2:	12 97       	sbiw	r26, 0x02	; 2
     af4:	20 30       	cpi	r18, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	38 07       	cpc	r19, r24
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	48 07       	cpc	r20, r24
     afe:	80 e4       	ldi	r24, 0x40	; 64
     b00:	58 07       	cpc	r21, r24
     b02:	58 f3       	brcs	.-42     	; 0xada <__unpack_f+0x66>
     b04:	14 96       	adiw	r26, 0x04	; 4
     b06:	2d 93       	st	X+, r18
     b08:	3d 93       	st	X+, r19
     b0a:	4d 93       	st	X+, r20
     b0c:	5c 93       	st	X, r21
     b0e:	17 97       	sbiw	r26, 0x07	; 7
     b10:	08 95       	ret
     b12:	2f 3f       	cpi	r18, 0xFF	; 255
     b14:	31 05       	cpc	r19, r1
     b16:	79 f4       	brne	.+30     	; 0xb36 <__unpack_f+0xc2>
     b18:	41 15       	cp	r20, r1
     b1a:	51 05       	cpc	r21, r1
     b1c:	61 05       	cpc	r22, r1
     b1e:	71 05       	cpc	r23, r1
     b20:	19 f4       	brne	.+6      	; 0xb28 <__unpack_f+0xb4>
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	8c 93       	st	X, r24
     b26:	08 95       	ret
     b28:	64 ff       	sbrs	r22, 4
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <__unpack_f+0xbe>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	8c 93       	st	X, r24
     b30:	12 c0       	rjmp	.+36     	; 0xb56 <__unpack_f+0xe2>
     b32:	1c 92       	st	X, r1
     b34:	10 c0       	rjmp	.+32     	; 0xb56 <__unpack_f+0xe2>
     b36:	2f 57       	subi	r18, 0x7F	; 127
     b38:	30 40       	sbci	r19, 0x00	; 0
     b3a:	13 96       	adiw	r26, 0x03	; 3
     b3c:	3c 93       	st	X, r19
     b3e:	2e 93       	st	-X, r18
     b40:	12 97       	sbiw	r26, 0x02	; 2
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	8c 93       	st	X, r24
     b46:	87 e0       	ldi	r24, 0x07	; 7
     b48:	44 0f       	add	r20, r20
     b4a:	55 1f       	adc	r21, r21
     b4c:	66 1f       	adc	r22, r22
     b4e:	77 1f       	adc	r23, r23
     b50:	8a 95       	dec	r24
     b52:	d1 f7       	brne	.-12     	; 0xb48 <__unpack_f+0xd4>
     b54:	70 64       	ori	r23, 0x40	; 64
     b56:	14 96       	adiw	r26, 0x04	; 4
     b58:	4d 93       	st	X+, r20
     b5a:	5d 93       	st	X+, r21
     b5c:	6d 93       	st	X+, r22
     b5e:	7c 93       	st	X, r23
     b60:	17 97       	sbiw	r26, 0x07	; 7
     b62:	08 95       	ret

00000b64 <__fpcmp_parts_f>:
     b64:	1f 93       	push	r17
     b66:	dc 01       	movw	r26, r24
     b68:	fb 01       	movw	r30, r22
     b6a:	9c 91       	ld	r25, X
     b6c:	92 30       	cpi	r25, 0x02	; 2
     b6e:	08 f4       	brcc	.+2      	; 0xb72 <__fpcmp_parts_f+0xe>
     b70:	47 c0       	rjmp	.+142    	; 0xc00 <__fpcmp_parts_f+0x9c>
     b72:	80 81       	ld	r24, Z
     b74:	82 30       	cpi	r24, 0x02	; 2
     b76:	08 f4       	brcc	.+2      	; 0xb7a <__fpcmp_parts_f+0x16>
     b78:	43 c0       	rjmp	.+134    	; 0xc00 <__fpcmp_parts_f+0x9c>
     b7a:	94 30       	cpi	r25, 0x04	; 4
     b7c:	51 f4       	brne	.+20     	; 0xb92 <__fpcmp_parts_f+0x2e>
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	1c 91       	ld	r17, X
     b82:	84 30       	cpi	r24, 0x04	; 4
     b84:	99 f5       	brne	.+102    	; 0xbec <__fpcmp_parts_f+0x88>
     b86:	81 81       	ldd	r24, Z+1	; 0x01
     b88:	68 2f       	mov	r22, r24
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	61 1b       	sub	r22, r17
     b8e:	71 09       	sbc	r23, r1
     b90:	3f c0       	rjmp	.+126    	; 0xc10 <__fpcmp_parts_f+0xac>
     b92:	84 30       	cpi	r24, 0x04	; 4
     b94:	21 f0       	breq	.+8      	; 0xb9e <__fpcmp_parts_f+0x3a>
     b96:	92 30       	cpi	r25, 0x02	; 2
     b98:	31 f4       	brne	.+12     	; 0xba6 <__fpcmp_parts_f+0x42>
     b9a:	82 30       	cpi	r24, 0x02	; 2
     b9c:	b9 f1       	breq	.+110    	; 0xc0c <__fpcmp_parts_f+0xa8>
     b9e:	81 81       	ldd	r24, Z+1	; 0x01
     ba0:	88 23       	and	r24, r24
     ba2:	89 f1       	breq	.+98     	; 0xc06 <__fpcmp_parts_f+0xa2>
     ba4:	2d c0       	rjmp	.+90     	; 0xc00 <__fpcmp_parts_f+0x9c>
     ba6:	11 96       	adiw	r26, 0x01	; 1
     ba8:	1c 91       	ld	r17, X
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	f1 f0       	breq	.+60     	; 0xbec <__fpcmp_parts_f+0x88>
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	18 17       	cp	r17, r24
     bb4:	d9 f4       	brne	.+54     	; 0xbec <__fpcmp_parts_f+0x88>
     bb6:	12 96       	adiw	r26, 0x02	; 2
     bb8:	2d 91       	ld	r18, X+
     bba:	3c 91       	ld	r19, X
     bbc:	13 97       	sbiw	r26, 0x03	; 3
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	82 17       	cp	r24, r18
     bc4:	93 07       	cpc	r25, r19
     bc6:	94 f0       	brlt	.+36     	; 0xbec <__fpcmp_parts_f+0x88>
     bc8:	28 17       	cp	r18, r24
     bca:	39 07       	cpc	r19, r25
     bcc:	bc f0       	brlt	.+46     	; 0xbfc <__fpcmp_parts_f+0x98>
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	8d 91       	ld	r24, X+
     bd2:	9d 91       	ld	r25, X+
     bd4:	0d 90       	ld	r0, X+
     bd6:	bc 91       	ld	r27, X
     bd8:	a0 2d       	mov	r26, r0
     bda:	24 81       	ldd	r18, Z+4	; 0x04
     bdc:	35 81       	ldd	r19, Z+5	; 0x05
     bde:	46 81       	ldd	r20, Z+6	; 0x06
     be0:	57 81       	ldd	r21, Z+7	; 0x07
     be2:	28 17       	cp	r18, r24
     be4:	39 07       	cpc	r19, r25
     be6:	4a 07       	cpc	r20, r26
     be8:	5b 07       	cpc	r21, r27
     bea:	18 f4       	brcc	.+6      	; 0xbf2 <__fpcmp_parts_f+0x8e>
     bec:	11 23       	and	r17, r17
     bee:	41 f0       	breq	.+16     	; 0xc00 <__fpcmp_parts_f+0x9c>
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <__fpcmp_parts_f+0xa2>
     bf2:	82 17       	cp	r24, r18
     bf4:	93 07       	cpc	r25, r19
     bf6:	a4 07       	cpc	r26, r20
     bf8:	b5 07       	cpc	r27, r21
     bfa:	40 f4       	brcc	.+16     	; 0xc0c <__fpcmp_parts_f+0xa8>
     bfc:	11 23       	and	r17, r17
     bfe:	19 f0       	breq	.+6      	; 0xc06 <__fpcmp_parts_f+0xa2>
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	05 c0       	rjmp	.+10     	; 0xc10 <__fpcmp_parts_f+0xac>
     c06:	6f ef       	ldi	r22, 0xFF	; 255
     c08:	7f ef       	ldi	r23, 0xFF	; 255
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <__fpcmp_parts_f+0xac>
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	cb 01       	movw	r24, r22
     c12:	1f 91       	pop	r17
     c14:	08 95       	ret

00000c16 <CREATE_RTOS_TASK>:
	vENALBE_TIMER();

}

BOOL_t CREATE_RTOS_TASK(void(*FPTR)(void),u8 PERIORTY,u16 PERIODICITY)
{
     c16:	9c 01       	movw	r18, r24
	if(PERIORTY<NUM_OF_TASK && FPTR !=NULLPTR && RTOS_SCHEDULR_ARRAY[PERIORTY].ptr ==NULLPTR  )
     c18:	63 30       	cpi	r22, 0x03	; 3
     c1a:	c0 f4       	brcc	.+48     	; 0xc4c <CREATE_RTOS_TASK+0x36>
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	b1 f0       	breq	.+44     	; 0xc4c <CREATE_RTOS_TASK+0x36>
     c20:	86 2f       	mov	r24, r22
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	fc 01       	movw	r30, r24
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	ee 0f       	add	r30, r30
     c2c:	ff 1f       	adc	r31, r31
     c2e:	e8 0f       	add	r30, r24
     c30:	f9 1f       	adc	r31, r25
     c32:	e9 5d       	subi	r30, 0xD9	; 217
     c34:	fd 4f       	sbci	r31, 0xFD	; 253
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	89 2b       	or	r24, r25
     c3c:	39 f4       	brne	.+14     	; 0xc4c <CREATE_RTOS_TASK+0x36>
	{
	RTOS_SCHEDULR_ARRAY[PERIORTY].ptr = FPTR;
     c3e:	33 83       	std	Z+3, r19	; 0x03
     c40:	22 83       	std	Z+2, r18	; 0x02
	RTOS_SCHEDULR_ARRAY[PERIORTY].periodicty = PERIODICITY;
     c42:	51 83       	std	Z+1, r21	; 0x01
     c44:	40 83       	st	Z, r20
	RTOS_SCHEDULR_ARRAY[PERIORTY].STATE = RESUME;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	84 83       	std	Z+4, r24	; 0x04
     c4a:	08 95       	ret

//	vSetPinDirection(PORT_A,PIN_0,OUTPUT);
//		TOG_BIT(PORTA,0);
     return TRUE;
     c4c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return FALSE;

}
     c4e:	08 95       	ret

00000c50 <RTOS_SCHADULAR>:


static void RTOS_SCHADULAR()
{
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
	static u32 rtos_tick = 0;
	rtos_tick ++;
     c54:	80 91 1c 02 	lds	r24, 0x021C
     c58:	90 91 1d 02 	lds	r25, 0x021D
     c5c:	a0 91 1e 02 	lds	r26, 0x021E
     c60:	b0 91 1f 02 	lds	r27, 0x021F
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	a1 1d       	adc	r26, r1
     c68:	b1 1d       	adc	r27, r1
     c6a:	80 93 1c 02 	sts	0x021C, r24
     c6e:	90 93 1d 02 	sts	0x021D, r25
     c72:	a0 93 1e 02 	sts	0x021E, r26
     c76:	b0 93 1f 02 	sts	0x021F, r27
     c7a:	c7 e2       	ldi	r28, 0x27	; 39
     c7c:	d2 e0       	ldi	r29, 0x02	; 2
	u8 i = 0;

	for(i=0;i<NUM_OF_TASK;i++)
	{
		if (RTOS_SCHEDULR_ARRAY[i].STATE == RESUME){
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	c1 f4       	brne	.+48     	; 0xcb4 <RTOS_SCHADULAR+0x64>

		if(rtos_tick % RTOS_SCHEDULR_ARRAY[i].periodicty==0 && RTOS_SCHEDULR_ARRAY[i].ptr != NULLPTR )
     c84:	28 81       	ld	r18, Y
     c86:	39 81       	ldd	r19, Y+1	; 0x01
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	60 91 1c 02 	lds	r22, 0x021C
     c90:	70 91 1d 02 	lds	r23, 0x021D
     c94:	80 91 1e 02 	lds	r24, 0x021E
     c98:	90 91 1f 02 	lds	r25, 0x021F
     c9c:	0e 94 26 11 	call	0x224c	; 0x224c <__udivmodsi4>
     ca0:	61 15       	cp	r22, r1
     ca2:	71 05       	cpc	r23, r1
     ca4:	81 05       	cpc	r24, r1
     ca6:	91 05       	cpc	r25, r1
     ca8:	29 f4       	brne	.+10     	; 0xcb4 <RTOS_SCHADULAR+0x64>
     caa:	ea 81       	ldd	r30, Y+2	; 0x02
     cac:	fb 81       	ldd	r31, Y+3	; 0x03
     cae:	30 97       	sbiw	r30, 0x00	; 0
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <RTOS_SCHADULAR+0x64>
		{
			RTOS_SCHEDULR_ARRAY[i].ptr();
     cb2:	09 95       	icall
     cb4:	25 96       	adiw	r28, 0x05	; 5
{
	static u32 rtos_tick = 0;
	rtos_tick ++;
	u8 i = 0;

	for(i=0;i<NUM_OF_TASK;i++)
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	c6 33       	cpi	r28, 0x36	; 54
     cba:	d8 07       	cpc	r29, r24
     cbc:	01 f7       	brne	.-64     	; 0xc7e <RTOS_SCHADULAR+0x2e>
			RTOS_SCHEDULR_ARRAY[i].ptr();
		}
		}
	}

}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <SUSPEND_TASK>:

void SUSPEND_TASK(u8 PERIORTY){
	RTOS_SCHEDULR_ARRAY[PERIORTY].STATE = SUSPEND;
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	fc 01       	movw	r30, r24
     cc8:	ee 0f       	add	r30, r30
     cca:	ff 1f       	adc	r31, r31
     ccc:	ee 0f       	add	r30, r30
     cce:	ff 1f       	adc	r31, r31
     cd0:	e8 0f       	add	r30, r24
     cd2:	f9 1f       	adc	r31, r25
     cd4:	e9 5d       	subi	r30, 0xD9	; 217
     cd6:	fd 4f       	sbci	r31, 0xFD	; 253
     cd8:	14 82       	std	Z+4, r1	; 0x04

}
     cda:	08 95       	ret

00000cdc <RESUME_TASK>:
void RESUME_TASK(u8 PERIORTY){
	RTOS_SCHEDULR_ARRAY[PERIORTY].STATE = RESUME;
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	fc 01       	movw	r30, r24
     ce0:	ee 0f       	add	r30, r30
     ce2:	ff 1f       	adc	r31, r31
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	e8 0f       	add	r30, r24
     cea:	f9 1f       	adc	r31, r25
     cec:	e9 5d       	subi	r30, 0xD9	; 217
     cee:	fd 4f       	sbci	r31, 0xFD	; 253
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	84 83       	std	Z+4, r24	; 0x04

}
     cf4:	08 95       	ret

00000cf6 <DELETE_TASK>:
void DELETE_TASK(u8 PERIORTY){


	RTOS_SCHEDULR_ARRAY[PERIORTY].ptr == NULLPTR;
}
     cf6:	08 95       	ret

00000cf8 <START_RTOS>:

void START_RTOS()
{

	// INIT TIMER
	vTimerInit();
     cf8:	0e 94 a9 06 	call	0xd52	; 0xd52 <vTimerInit>

	// SELECT MODE // CTC  TO SELECT SYSTICK

	vOCR_Timer(249);  // SYSTICK  =  1MS
     cfc:	89 ef       	ldi	r24, 0xF9	; 249
     cfe:	0e 94 cc 06 	call	0xd98	; 0xd98 <vOCR_Timer>



	// CALLBACK(SHEDULAR)
	CALLBACK_OCR0_TIMER0(&RTOS_SCHADULAR);
     d02:	88 e2       	ldi	r24, 0x28	; 40
     d04:	96 e0       	ldi	r25, 0x06	; 6
     d06:	0e 94 ef 06 	call	0xdde	; 0xdde <CALLBACK_OCR0_TIMER0>



	// ENEBLE GIE
	ENABLE_GIE();
     d0a:	0e 94 c3 07 	call	0xf86	; 0xf86 <ENABLE_GIE>

	// ENEBLE TIMER

	vENALBE_TIMER();
     d0e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <vENALBE_TIMER>

}
     d12:	08 95       	ret

00000d14 <UART_INIT>:



void UART_INIT(){
	//baud rate
	UBRRL = Baud_Rate;
     d14:	87 e6       	ldi	r24, 0x67	; 103
     d16:	89 b9       	out	0x09, r24	; 9
	//number of data bits
	UCSRC &= 0b11111001;
     d18:	80 b5       	in	r24, 0x20	; 32
     d1a:	89 7f       	andi	r24, 0xF9	; 249
     d1c:	80 bd       	out	0x20, r24	; 32
	UCSRC |= NUM_OF_DATA_BITS;
     d1e:	80 b5       	in	r24, 0x20	; 32
     d20:	86 60       	ori	r24, 0x06	; 6
     d22:	80 bd       	out	0x20, r24	; 32
	//select sync
	if(UART_MODE == SYNC){
		SET_BIT(UCSRC,UMREL);
	}else if(UART_MODE == ASYNC){
		CLEAR_BIT(UCSRC,UMREL);
     d24:	80 b5       	in	r24, 0x20	; 32
     d26:	8f 77       	andi	r24, 0x7F	; 127
     d28:	80 bd       	out	0x20, r24	; 32
	}
	//num of stop bits
	if(NUM_OF_STOP_BITS == ONE_STOP){
		CLEAR_BIT(UCSRC,USBS);
     d2a:	80 b5       	in	r24, 0x20	; 32
     d2c:	87 7f       	andi	r24, 0xF7	; 247
     d2e:	80 bd       	out	0x20, r24	; 32
	}else if(NUM_OF_STOP_BITS == TWO_STOP){
		SET_BIT(UCSRC,USBS);
	}

	//select parity
	UCSRC &= 0b11001111;
     d30:	80 b5       	in	r24, 0x20	; 32
     d32:	8f 7c       	andi	r24, 0xCF	; 207
     d34:	80 bd       	out	0x20, r24	; 32
	UCSRC |= PARITY_MODE;
     d36:	80 b5       	in	r24, 0x20	; 32
     d38:	80 bd       	out	0x20, r24	; 32
	//enable interrupt
	SET_BIT(UCSRB,RXCIE);
     d3a:	57 9a       	sbi	0x0a, 7	; 10
	// enable UART
	SET_BIT(UCSRB,RXEN);
     d3c:	54 9a       	sbi	0x0a, 4	; 10
	SET_BIT(UCSRB,TXEN);
     d3e:	53 9a       	sbi	0x0a, 3	; 10



}
     d40:	08 95       	ret

00000d42 <UART_SEND_DATA>:
void UART_SEND_DATA(u8 data){
	while(!READ_BIT(UCSRA,UDRE));
     d42:	5d 9b       	sbis	0x0b, 5	; 11
     d44:	fe cf       	rjmp	.-4      	; 0xd42 <UART_SEND_DATA>
	UDR = data;
     d46:	8c b9       	out	0x0c, r24	; 12

}
     d48:	08 95       	ret

00000d4a <UART_RECIVE_DATA>:
u8 UART_RECIVE_DATA(){
	while(!READ_BIT(UCSRA,RXC));
     d4a:	5f 9b       	sbis	0x0b, 7	; 11
     d4c:	fe cf       	rjmp	.-4      	; 0xd4a <UART_RECIVE_DATA>

	return UDR;
     d4e:	8c b1       	in	r24, 0x0c	; 12
}
     d50:	08 95       	ret

00000d52 <vTimerInit>:
		TCCR2 |= Timer2_CompMode;
	}
#elif TimerMODE == TIMER_1
	//select mode
	//FastPWM top ICR1
	TCCR1A &= ClearModeTCCR1A;
     d52:	8f b5       	in	r24, 0x2f	; 47
     d54:	8c 7f       	andi	r24, 0xFC	; 252
     d56:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= Timer1ModeTCCR1A;
     d58:	8f b5       	in	r24, 0x2f	; 47
     d5a:	82 60       	ori	r24, 0x02	; 2
     d5c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &= ClearModeTCCR1B;
     d5e:	8e b5       	in	r24, 0x2e	; 46
     d60:	87 7e       	andi	r24, 0xE7	; 231
     d62:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= Timer1ModeTCCR1B;
     d64:	8e b5       	in	r24, 0x2e	; 46
     d66:	88 61       	ori	r24, 0x18	; 24
     d68:	8e bd       	out	0x2e, r24	; 46
	//select compare mode
	//non-inverting
	TCCR1A &=ClearTimer1Comp;
     d6a:	8f b5       	in	r24, 0x2f	; 47
     d6c:	8f 73       	andi	r24, 0x3F	; 63
     d6e:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= Timer1_CompMode;
     d70:	8f b5       	in	r24, 0x2f	; 47
     d72:	80 68       	ori	r24, 0x80	; 128
     d74:	8f bd       	out	0x2f, r24	; 47
	if(Timer1ModeTCCR1A == TCCR1A_NormalMode && Timer1ModeTCCR1B == TCCR1B_NormalMode){

		SET_BIT(TIMSK,TOIE1);

	}else{
		SET_BIT(TIMSK,OCIE1A);
     d76:	89 b7       	in	r24, 0x39	; 57
     d78:	80 61       	ori	r24, 0x10	; 16
     d7a:	89 bf       	out	0x39, r24	; 57
		SET_BIT(TIMSK,OCIE1B);
     d7c:	89 b7       	in	r24, 0x39	; 57
     d7e:	88 60       	ori	r24, 0x08	; 8
     d80:	89 bf       	out	0x39, r24	; 57
	TCCR1A |= Timer1_CompMode;


	vENABLE_INTERRUPT_Timer();
	if(Timer1ModeTCCR1A != TCCR1A_NormalMode && Timer1ModeTCCR1B != TCCR1B_NormalMode){
		TCCR1A &=ClearTimer1Comp;
     d82:	8f b5       	in	r24, 0x2f	; 47
     d84:	8f 73       	andi	r24, 0x3F	; 63
     d86:	8f bd       	out	0x2f, r24	; 47
		TCCR1A |= Timer1_CompMode;
     d88:	8f b5       	in	r24, 0x2f	; 47
     d8a:	80 68       	ori	r24, 0x80	; 128
     d8c:	8f bd       	out	0x2f, r24	; 47
	}
#endif

}
     d8e:	08 95       	ret

00000d90 <vPreload_Timer>:
#if TimerMODE == TIMER_0
	TCNT0 = value;
#elif TimerMODE == TIMER_2
	TCNT2 = value;
#elif TimerMODE == TIMER_1
	TCNT1 = value;
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	9d bd       	out	0x2d, r25	; 45
     d94:	8c bd       	out	0x2c, r24	; 44
#endif
}
     d96:	08 95       	ret

00000d98 <vOCR_Timer>:
#if TimerMODE == TIMER_0
	OCR0= value;
#elif TimerMODE == TIMER_2
	OCR2= value;
#elif TimerMODE == TIMER_1
	OCR1A= value;
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9b bd       	out	0x2b, r25	; 43
     d9c:	8a bd       	out	0x2a, r24	; 42

#endif
}
     d9e:	08 95       	ret

00000da0 <vDISAPLE_INTERRUPT_Timer>:
#if TimerMODE == TIMER_0
	TIMSK&=0b11111100;
#elif TimerMODE == TIMER_2
	TIMSK&=0b00111111;
#elif TimerMODE == TIMER_1
	TIMSK&=0b11000011;
     da0:	89 b7       	in	r24, 0x39	; 57
     da2:	83 7c       	andi	r24, 0xC3	; 195
     da4:	89 bf       	out	0x39, r24	; 57

#endif
}
     da6:	08 95       	ret

00000da8 <vENABLE_INTERRUPT_Timer>:
	if(Timer1ModeTCCR1A == TCCR1A_NormalMode && Timer1ModeTCCR1B == TCCR1B_NormalMode){

		SET_BIT(TIMSK,TOIE1);

	}else{
		SET_BIT(TIMSK,OCIE1A);
     da8:	89 b7       	in	r24, 0x39	; 57
     daa:	80 61       	ori	r24, 0x10	; 16
     dac:	89 bf       	out	0x39, r24	; 57
		SET_BIT(TIMSK,OCIE1B);
     dae:	89 b7       	in	r24, 0x39	; 57
     db0:	88 60       	ori	r24, 0x08	; 8
     db2:	89 bf       	out	0x39, r24	; 57


	}
#endif
}
     db4:	08 95       	ret

00000db6 <vENALBE_TIMER>:
void vENALBE_TIMER (void){
#if TimerMODE == TIMER_0
	TCCR0 &= ClearPrescaller;
	TCCR0 |= Timer0PrescallerMode;
#elif  TimerMODE == TIMER_1
	TCCR1B&= ClearPrescaller;
     db6:	8e b5       	in	r24, 0x2e	; 46
     db8:	88 7f       	andi	r24, 0xF8	; 248
     dba:	8e bd       	out	0x2e, r24	; 46
		TCCR1B |= Timer1PrescallerMode;
     dbc:	8e b5       	in	r24, 0x2e	; 46
     dbe:	84 60       	ori	r24, 0x04	; 4
     dc0:	8e bd       	out	0x2e, r24	; 46
#elif  TimerMODE == TIMER_2
		TCCR2 &= ClearPrescaller;
		TCCR2 |= Timer2PrescallerMode;

#endif
}
     dc2:	08 95       	ret

00000dc4 <vDISAPLE_TIMER>:
#if TimerMODE == TIMER_0
	TCCR0 &= ClearPrescaller;
#elif TimerMODE == TIMER_2
	TCCR2 &= ClearPrescaller;
#elif TimerMODE == TIMER_1
	TCCR1B &= ClearPrescaller;
     dc4:	8e b5       	in	r24, 0x2e	; 46
     dc6:	88 7f       	andi	r24, 0xF8	; 248
     dc8:	8e bd       	out	0x2e, r24	; 46

#endif
}
     dca:	08 95       	ret

00000dcc <vSet_ICR1>:
void vSet_ICR1( u8 value){
	ICR1 = value;
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	97 bd       	out	0x27, r25	; 39
     dd0:	86 bd       	out	0x26, r24	; 38
}
     dd2:	08 95       	ret

00000dd4 <CALLBACK_TOV_TIMER0>:
void CALLBACK_TOV_TIMER0(void (*FPTR)(void))//&TASK1
{


		PTR_OVF= FPTR;
     dd4:	90 93 21 02 	sts	0x0221, r25
     dd8:	80 93 20 02 	sts	0x0220, r24



}
     ddc:	08 95       	ret

00000dde <CALLBACK_OCR0_TIMER0>:

void CALLBACK_OCR0_TIMER0(void (*FPTR)(void))
{
	PTR_OCR = FPTR;
     dde:	90 93 23 02 	sts	0x0223, r25
     de2:	80 93 22 02 	sts	0x0222, r24
}
     de6:	08 95       	ret

00000de8 <__vector_11>:




void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_11 (void){
     de8:	1f 92       	push	r1
     dea:	0f 92       	push	r0
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
     df2:	2f 93       	push	r18
     df4:	3f 93       	push	r19
     df6:	4f 93       	push	r20
     df8:	5f 93       	push	r21
     dfa:	6f 93       	push	r22
     dfc:	7f 93       	push	r23
     dfe:	8f 93       	push	r24
     e00:	9f 93       	push	r25
     e02:	af 93       	push	r26
     e04:	bf 93       	push	r27
     e06:	ef 93       	push	r30
     e08:	ff 93       	push	r31

	if(PTR_OVF != NULLPTR)
     e0a:	e0 91 20 02 	lds	r30, 0x0220
     e0e:	f0 91 21 02 	lds	r31, 0x0221
     e12:	30 97       	sbiw	r30, 0x00	; 0
     e14:	09 f0       	breq	.+2      	; 0xe18 <__vector_11+0x30>
	{
		PTR_OVF();
     e16:	09 95       	icall
	}


}
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <__vector_10>:



void __vector_10 (void) __attribute__ ((signal,used, externally_visible)) ;\
void __vector_10 (void){
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	11 24       	eor	r1, r1
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	4f 93       	push	r20
     e4a:	5f 93       	push	r21
     e4c:	6f 93       	push	r22
     e4e:	7f 93       	push	r23
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
     e54:	af 93       	push	r26
     e56:	bf 93       	push	r27
     e58:	ef 93       	push	r30
     e5a:	ff 93       	push	r31

	if(PTR_OCR != NULLPTR)
     e5c:	e0 91 22 02 	lds	r30, 0x0222
     e60:	f0 91 23 02 	lds	r31, 0x0223
     e64:	30 97       	sbiw	r30, 0x00	; 0
     e66:	09 f0       	breq	.+2      	; 0xe6a <__vector_10+0x30>
	{
		PTR_OCR();
     e68:	09 95       	icall
	}



}
     e6a:	ff 91       	pop	r31
     e6c:	ef 91       	pop	r30
     e6e:	bf 91       	pop	r27
     e70:	af 91       	pop	r26
     e72:	9f 91       	pop	r25
     e74:	8f 91       	pop	r24
     e76:	7f 91       	pop	r23
     e78:	6f 91       	pop	r22
     e7a:	5f 91       	pop	r21
     e7c:	4f 91       	pop	r20
     e7e:	3f 91       	pop	r19
     e80:	2f 91       	pop	r18
     e82:	0f 90       	pop	r0
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	0f 90       	pop	r0
     e88:	1f 90       	pop	r1
     e8a:	18 95       	reti

00000e8c <SPI_INIT>:

void SPI_INIT()
{
	//SELECT LSB MSB
#if WRITE_MODE==LSB
	SET_BIT(SPCR,DORD);
     e8c:	6d 9a       	sbi	0x0d, 5	; 13
#elif WRITE_MODE==MSB
	CLEAR_BIT(SPCR,DORD);
#endif
	//SELECT MASTER
#if SPI_MODE==	MASTER
	SET_BIT(SPCR,MSTR);
     e8e:	6c 9a       	sbi	0x0d, 4	; 13
	//SELECT CLOCK POLARITY
#if CLOCK_POLATITY_MODE == RAISING
	CLEAR_BIT(SPCR,CPOL);
     e90:	6b 98       	cbi	0x0d, 3	; 13
#elif  CLOCK_POLATITY_MODE == FALLING
	SET_BIT(SPCR,CPOL);
#endif
	//SELECT CLOCK PHASE
#if CLOCK_PHASE_MODE == SAMPLE
	CLEAR_BIT(SPCR,CPHA);
     e92:	6a 98       	cbi	0x0d, 2	; 13
#elif  CLOCK_PHASE_MODE == SETUP
	SET_BIT(SPCR,CPHA);
#endif
	//SELECT D2S
	//SELECT CLOCK
	SET_BIT(SPCR,SPR0);
     e94:	68 9a       	sbi	0x0d, 0	; 13
	CLEAR_BIT(SPCR,SPR1);
     e96:	69 98       	cbi	0x0d, 1	; 13
	CLEAR_BIT(SPSR,SPI2X);
     e98:	70 98       	cbi	0x0e, 0	; 14
	SET_BIT(SPCR,SPR0);
		CLEAR_BIT(SPCR,SPR1);
		CLEAR_BIT(SPSR,SPI2X);
#endif
		//ENABLE SPI
	SET_BIT(SPCR,SPE);
     e9a:	6e 9a       	sbi	0x0d, 6	; 13
}
     e9c:	08 95       	ret

00000e9e <SPI_TRAS_RECIVE>:


 void SPI_TRAS_RECIVE( u8 DATA ,u8 *recive )
{
     e9e:	fb 01       	movw	r30, r22


// SPDR= DATA

	SPDR=DATA;
     ea0:	8f b9       	out	0x0f, r24	; 15
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <SPI_TRAS_RECIVE+0xa>
//BUST WAIT FLAG
	while(READ_BIT(SPSR,SPIF)==0)
//RETURN SPDR
		*recive=  SPDR;
     ea4:	8f b1       	in	r24, 0x0f	; 15
     ea6:	80 83       	st	Z, r24

// SPDR= DATA

	SPDR=DATA;
//BUST WAIT FLAG
	while(READ_BIT(SPSR,SPIF)==0)
     ea8:	77 9b       	sbis	0x0e, 7	; 14
     eaa:	fc cf       	rjmp	.-8      	; 0xea4 <SPI_TRAS_RECIVE+0x6>
//RETURN SPDR
		*recive=  SPDR;

}
     eac:	08 95       	ret

00000eae <vI2C_Init>:
#include "../../ROAD_MAP/ROAD_MAP.h"
#include "../../Config/I2C_Config.h"
#include "I2C_Interface.h"
void vI2C_Init(){
	//select frequency at 400khz
	CLEAR_BIT(TWSR,TWPS0);
     eae:	08 98       	cbi	0x01, 0	; 1
	CLEAR_BIT(TWSR,TWPS1);
     eb0:	09 98       	cbi	0x01, 1	; 1
	TWBR =12;
     eb2:	8c e0       	ldi	r24, 0x0C	; 12
     eb4:	80 b9       	out	0x00, r24	; 0
	//enable acknowledge
	SET_BIT(TWCR,TWEA);
     eb6:	86 b7       	in	r24, 0x36	; 54
     eb8:	80 64       	ori	r24, 0x40	; 64
     eba:	86 bf       	out	0x36, r24	; 54
	//ENABLE I2C
	SET_BIT(TWCR,TWEN);
     ebc:	86 b7       	in	r24, 0x36	; 54
     ebe:	84 60       	ori	r24, 0x04	; 4
     ec0:	86 bf       	out	0x36, r24	; 54

}
     ec2:	08 95       	ret

00000ec4 <vI2C_StartCondition>:

void vI2C_StartCondition(){


	//START COND
	SET_BIT(TWCR,TWSTA);
     ec4:	86 b7       	in	r24, 0x36	; 54
     ec6:	80 62       	ori	r24, 0x20	; 32
     ec8:	86 bf       	out	0x36, r24	; 54
	//CLEAR HW FLAG
	SET_BIT(TWCR,TWINT);
     eca:	86 b7       	in	r24, 0x36	; 54
     ecc:	80 68       	ori	r24, 0x80	; 128
     ece:	86 bf       	out	0x36, r24	; 54
	//WAIT FOR FLAG
	while(!(READ_BIT(TWCR,TWINT)));
     ed0:	06 b6       	in	r0, 0x36	; 54
     ed2:	07 fe       	sbrs	r0, 7
     ed4:	fd cf       	rjmp	.-6      	; 0xed0 <vI2C_StartCondition+0xc>
	//CHECK STATS CODE
	while(TWSR & 0xf8 != 0x08);
     ed6:	08 99       	sbic	0x01, 0	; 1
     ed8:	fe cf       	rjmp	.-4      	; 0xed6 <vI2C_StartCondition+0x12>


}
     eda:	08 95       	ret

00000edc <vI2C_ReStart>:

void vI2C_ReStart(){
	//START COND
	SET_BIT(TWCR,TWSTA);
     edc:	86 b7       	in	r24, 0x36	; 54
     ede:	80 62       	ori	r24, 0x20	; 32
     ee0:	86 bf       	out	0x36, r24	; 54
	//CLEAR HW FLAG

	SET_BIT(TWCR,TWINT);
     ee2:	86 b7       	in	r24, 0x36	; 54
     ee4:	80 68       	ori	r24, 0x80	; 128
     ee6:	86 bf       	out	0x36, r24	; 54
	//WAIT FOR FLAG
	while(!(READ_BIT(TWCR,TWINT)));
     ee8:	06 b6       	in	r0, 0x36	; 54
     eea:	07 fe       	sbrs	r0, 7
     eec:	fd cf       	rjmp	.-6      	; 0xee8 <vI2C_ReStart+0xc>
	//CHECK STATS CODE
	while(TWSR & 0xf8 != 0x10);
     eee:	08 99       	sbic	0x01, 0	; 1
     ef0:	fe cf       	rjmp	.-4      	; 0xeee <vI2C_ReStart+0x12>
}
     ef2:	08 95       	ret

00000ef4 <vI2C_SendAddressWithWrite>:

void vI2C_SendAddressWithWrite(u8 ADD){

	if(ADD <128){
     ef4:	87 fd       	sbrc	r24, 7
     ef6:	0d c0       	rjmp	.+26     	; 0xf12 <vI2C_SendAddressWithWrite+0x1e>
		u8 adress =ADD<<1;
     ef8:	88 0f       	add	r24, r24
		CLEAR_BIT(adress,0);
		TWDR= adress;
     efa:	83 b9       	out	0x03, r24	; 3

		CLEAR_BIT(TWCR,TWSTA);
     efc:	86 b7       	in	r24, 0x36	; 54
     efe:	8f 7d       	andi	r24, 0xDF	; 223
     f00:	86 bf       	out	0x36, r24	; 54
		//CLEAR HW FLAG
		SET_BIT(TWCR,TWINT);
     f02:	86 b7       	in	r24, 0x36	; 54
     f04:	80 68       	ori	r24, 0x80	; 128
     f06:	86 bf       	out	0x36, r24	; 54
		//WAIT FOR FLAG
		while(!(READ_BIT(TWCR,TWINT)));
     f08:	06 b6       	in	r0, 0x36	; 54
     f0a:	07 fe       	sbrs	r0, 7
     f0c:	fd cf       	rjmp	.-6      	; 0xf08 <vI2C_SendAddressWithWrite+0x14>
		//CHECK STATS CODE
		while(TWSR & 0xf8 != 0x18);
     f0e:	08 99       	sbic	0x01, 0	; 1
     f10:	fe cf       	rjmp	.-4      	; 0xf0e <vI2C_SendAddressWithWrite+0x1a>
     f12:	08 95       	ret

00000f14 <vI2C_SendAddressWithRead>:

	}
}

void vI2C_SendAddressWithRead(u8 ADD){
	if(ADD <127){
     f14:	8f 37       	cpi	r24, 0x7F	; 127
     f16:	70 f4       	brcc	.+28     	; 0xf34 <vI2C_SendAddressWithRead+0x20>
		u8 adress =ADD <<1;
     f18:	88 0f       	add	r24, r24
		SET_BIT(adress,0);
     f1a:	81 60       	ori	r24, 0x01	; 1
		TWDR= adress;
     f1c:	83 b9       	out	0x03, r24	; 3
		CLEAR_BIT(TWCR,TWSTA);
     f1e:	86 b7       	in	r24, 0x36	; 54
     f20:	8f 7d       	andi	r24, 0xDF	; 223
     f22:	86 bf       	out	0x36, r24	; 54

		//CLEAR HW FLAG
		SET_BIT(TWCR,TWINT);
     f24:	86 b7       	in	r24, 0x36	; 54
     f26:	80 68       	ori	r24, 0x80	; 128
     f28:	86 bf       	out	0x36, r24	; 54
		//WAIT FOR FLAG
		while(!(READ_BIT(TWCR,TWINT)));
     f2a:	06 b6       	in	r0, 0x36	; 54
     f2c:	07 fe       	sbrs	r0, 7
     f2e:	fd cf       	rjmp	.-6      	; 0xf2a <vI2C_SendAddressWithRead+0x16>
		//CHECK STATS CODE
		while(TWSR & 0xf8 != 0x40);
     f30:	08 99       	sbic	0x01, 0	; 1
     f32:	fe cf       	rjmp	.-4      	; 0xf30 <vI2C_SendAddressWithRead+0x1c>
     f34:	08 95       	ret

00000f36 <vI2CSendData>:

}

void vI2CSendData(u8 Data){
	if(Data <256){
		TWDR = Data;
     f36:	83 b9       	out	0x03, r24	; 3
		//CLEAR HW FLAG
		SET_BIT(TWCR,TWINT);
     f38:	86 b7       	in	r24, 0x36	; 54
     f3a:	80 68       	ori	r24, 0x80	; 128
     f3c:	86 bf       	out	0x36, r24	; 54
		while(!(READ_BIT(TWCR,TWINT)));
     f3e:	06 b6       	in	r0, 0x36	; 54
     f40:	07 fe       	sbrs	r0, 7
     f42:	fd cf       	rjmp	.-6      	; 0xf3e <vI2CSendData+0x8>
		//CHECK STATS CODE
		while(TWSR & 0xf8 != 0x28);
     f44:	08 99       	sbic	0x01, 0	; 1
     f46:	fe cf       	rjmp	.-4      	; 0xf44 <vI2CSendData+0xe>
	}

}
     f48:	08 95       	ret

00000f4a <u8I2C_ReciveData>:

u8 u8I2C_ReciveData(u8 ack){
	if (ack == WITH_ACK)
     f4a:	88 23       	and	r24, r24
     f4c:	19 f4       	brne	.+6      	; 0xf54 <u8I2C_ReciveData+0xa>
	{
		SET_BIT(TWCR,TWEA);
     f4e:	86 b7       	in	r24, 0x36	; 54
     f50:	80 64       	ori	r24, 0x40	; 64
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <u8I2C_ReciveData+0x12>
	}
	else if(ack == WITHOUT_ACK)
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	19 f4       	brne	.+6      	; 0xf5e <u8I2C_ReciveData+0x14>
	{
		CLEAR_BIT(TWCR,TWEA);
     f58:	86 b7       	in	r24, 0x36	; 54
     f5a:	8f 7b       	andi	r24, 0xBF	; 191
     f5c:	86 bf       	out	0x36, r24	; 54
	}
	//CLEAR HW FLAG
	SET_BIT(TWCR,TWINT);
     f5e:	86 b7       	in	r24, 0x36	; 54
     f60:	80 68       	ori	r24, 0x80	; 128
     f62:	86 bf       	out	0x36, r24	; 54
	while(!(READ_BIT(TWCR,TWINT)));
     f64:	06 b6       	in	r0, 0x36	; 54
     f66:	07 fe       	sbrs	r0, 7
     f68:	fd cf       	rjmp	.-6      	; 0xf64 <u8I2C_ReciveData+0x1a>
	//CHECK STATS CODE
	while(TWSR & 0xf8 != 0x50);
     f6a:	08 99       	sbic	0x01, 0	; 1
     f6c:	fe cf       	rjmp	.-4      	; 0xf6a <u8I2C_ReciveData+0x20>
	SET_BIT(TWCR,TWEA);
     f6e:	86 b7       	in	r24, 0x36	; 54
     f70:	80 64       	ori	r24, 0x40	; 64
     f72:	86 bf       	out	0x36, r24	; 54
	return TWDR;
     f74:	83 b1       	in	r24, 0x03	; 3
}
     f76:	08 95       	ret

00000f78 <vI2C_StopCondition>:

void vI2C_StopCondition(){
	SET_BIT(TWCR,TWSTO);
     f78:	86 b7       	in	r24, 0x36	; 54
     f7a:	80 61       	ori	r24, 0x10	; 16
     f7c:	86 bf       	out	0x36, r24	; 54
	//CLEAR HW FLAG
	SET_BIT(TWCR,TWINT);
     f7e:	86 b7       	in	r24, 0x36	; 54
     f80:	80 68       	ori	r24, 0x80	; 128
     f82:	86 bf       	out	0x36, r24	; 54
}
     f84:	08 95       	ret

00000f86 <ENABLE_GIE>:
#include "../../LIB/STD_TYPE.h"
#include "../../ROAD_MAP/ROAD_MAP.h"
#include "GIE_Interface.h"

void ENABLE_GIE(){
	SET_BIT(SREG,I);
     f86:	8f b7       	in	r24, 0x3f	; 63
     f88:	80 68       	ori	r24, 0x80	; 128
     f8a:	8f bf       	out	0x3f, r24	; 63

}
     f8c:	08 95       	ret

00000f8e <DISABLE_GIE>:
void DISABLE_GIE(){
	CLEAR_BIT(SREG,I);
     f8e:	8f b7       	in	r24, 0x3f	; 63
     f90:	8f 77       	andi	r24, 0x7F	; 127
     f92:	8f bf       	out	0x3f, r24	; 63

}
     f94:	08 95       	ret

00000f96 <vEnable_EXTI>:
#include "../../Config/EXTI_Config.h"


void vEnable_EXTI(EXTI_T INT) {

	switch(INT){
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	41 f0       	breq	.+16     	; 0xfaa <vEnable_EXTI+0x14>
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	18 f0       	brcs	.+6      	; 0xfa4 <vEnable_EXTI+0xe>
     f9e:	82 30       	cpi	r24, 0x02	; 2
     fa0:	59 f4       	brne	.+22     	; 0xfb8 <vEnable_EXTI+0x22>
     fa2:	07 c0       	rjmp	.+14     	; 0xfb2 <vEnable_EXTI+0x1c>
	case EXTI0:	SET_BIT(GICR,INT0); break;
     fa4:	8b b7       	in	r24, 0x3b	; 59
     fa6:	80 64       	ori	r24, 0x40	; 64
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <vEnable_EXTI+0x18>
	case EXTI1:	SET_BIT(GICR,INT1); break;
     faa:	8b b7       	in	r24, 0x3b	; 59
     fac:	80 68       	ori	r24, 0x80	; 128
     fae:	8b bf       	out	0x3b, r24	; 59
     fb0:	08 95       	ret
	case EXTI2:	SET_BIT(GICR,INT2); break;
     fb2:	8b b7       	in	r24, 0x3b	; 59
     fb4:	80 62       	ori	r24, 0x20	; 32
     fb6:	8b bf       	out	0x3b, r24	; 59
     fb8:	08 95       	ret

00000fba <vDisable_EXTI>:

}

void vDisable_EXTI(EXTI_T INT){

	switch(INT){
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	41 f0       	breq	.+16     	; 0xfce <vDisable_EXTI+0x14>
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	18 f0       	brcs	.+6      	; 0xfc8 <vDisable_EXTI+0xe>
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	59 f4       	brne	.+22     	; 0xfdc <vDisable_EXTI+0x22>
     fc6:	07 c0       	rjmp	.+14     	; 0xfd6 <vDisable_EXTI+0x1c>
	case EXTI0:	CLEAR_BIT(GICR,INT0); break;
     fc8:	8b b7       	in	r24, 0x3b	; 59
     fca:	8f 7b       	andi	r24, 0xBF	; 191
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <vDisable_EXTI+0x18>
	case EXTI1:	CLEAR_BIT(GICR,INT1); break;
     fce:	8b b7       	in	r24, 0x3b	; 59
     fd0:	8f 77       	andi	r24, 0x7F	; 127
     fd2:	8b bf       	out	0x3b, r24	; 59
     fd4:	08 95       	ret
	case EXTI2:	CLEAR_BIT(GICR,INT2); break;
     fd6:	8b b7       	in	r24, 0x3b	; 59
     fd8:	8f 7d       	andi	r24, 0xDF	; 223
     fda:	8b bf       	out	0x3b, r24	; 59
     fdc:	08 95       	ret

00000fde <vMod_EXTI>:
	}
}

void vMod_EXTI(EXTI_T INT, u8 MODE){
	switch(INT){
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	21 f1       	breq	.+72     	; 0x102a <vMod_EXTI+0x4c>
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	20 f0       	brcs	.+8      	; 0xfee <vMod_EXTI+0x10>
     fe6:	82 30       	cpi	r24, 0x02	; 2
     fe8:	09 f0       	breq	.+2      	; 0xfec <vMod_EXTI+0xe>
     fea:	47 c0       	rjmp	.+142    	; 0x107a <vMod_EXTI+0x9c>
     fec:	3a c0       	rjmp	.+116    	; 0x1062 <vMod_EXTI+0x84>
	case EXTI0:
		switch(MODE){
     fee:	61 30       	cpi	r22, 0x01	; 1
     ff0:	69 f0       	breq	.+26     	; 0x100c <vMod_EXTI+0x2e>
     ff2:	61 30       	cpi	r22, 0x01	; 1
     ff4:	28 f0       	brcs	.+10     	; 0x1000 <vMod_EXTI+0x22>
     ff6:	62 30       	cpi	r22, 0x02	; 2
     ff8:	79 f0       	breq	.+30     	; 0x1018 <vMod_EXTI+0x3a>
     ffa:	63 30       	cpi	r22, 0x03	; 3
     ffc:	f1 f5       	brne	.+124    	; 0x107a <vMod_EXTI+0x9c>
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <vMod_EXTI+0x40>
		case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC01);
    1000:	85 b7       	in	r24, 0x35	; 53
    1002:	8d 7f       	andi	r24, 0xFD	; 253
    1004:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC00);
    1006:	85 b7       	in	r24, 0x35	; 53
    1008:	8e 7f       	andi	r24, 0xFE	; 254
    100a:	29 c0       	rjmp	.+82     	; 0x105e <vMod_EXTI+0x80>
			break;
		case LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    100c:	85 b7       	in	r24, 0x35	; 53
    100e:	81 60       	ori	r24, 0x01	; 1
    1010:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC01);
    1012:	85 b7       	in	r24, 0x35	; 53
    1014:	8d 7f       	andi	r24, 0xFD	; 253
    1016:	23 c0       	rjmp	.+70     	; 0x105e <vMod_EXTI+0x80>
			break;
		case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC00);
    1018:	85 b7       	in	r24, 0x35	; 53
    101a:	8e 7f       	andi	r24, 0xFE	; 254
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <vMod_EXTI+0x44>
			SET_BIT(MCUCR,ISC01);
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    101e:	85 b7       	in	r24, 0x35	; 53
    1020:	81 60       	ori	r24, 0x01	; 1
    1022:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
    1024:	85 b7       	in	r24, 0x35	; 53
    1026:	82 60       	ori	r24, 0x02	; 2
    1028:	1a c0       	rjmp	.+52     	; 0x105e <vMod_EXTI+0x80>
			break;
		}
		break;
		case EXTI1:
			switch(MODE){
    102a:	61 30       	cpi	r22, 0x01	; 1
    102c:	51 f0       	breq	.+20     	; 0x1042 <vMod_EXTI+0x64>
    102e:	61 30       	cpi	r22, 0x01	; 1
    1030:	28 f0       	brcs	.+10     	; 0x103c <vMod_EXTI+0x5e>
    1032:	62 30       	cpi	r22, 0x02	; 2
    1034:	61 f0       	breq	.+24     	; 0x104e <vMod_EXTI+0x70>
    1036:	63 30       	cpi	r22, 0x03	; 3
    1038:	01 f5       	brne	.+64     	; 0x107a <vMod_EXTI+0x9c>
    103a:	0c c0       	rjmp	.+24     	; 0x1054 <vMod_EXTI+0x76>
			case LOW_LEVEL:
				CLEAR_BIT(MCUCR,ISC10);
    103c:	85 b7       	in	r24, 0x35	; 53
    103e:	8b 7f       	andi	r24, 0xFB	; 251
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <vMod_EXTI+0x68>
				CLEAR_BIT(MCUCR,ISC11);
				break;
			case LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
    1042:	85 b7       	in	r24, 0x35	; 53
    1044:	84 60       	ori	r24, 0x04	; 4
    1046:	85 bf       	out	0x35, r24	; 53
				CLEAR_BIT(MCUCR,ISC11);
    1048:	85 b7       	in	r24, 0x35	; 53
    104a:	87 7f       	andi	r24, 0xF7	; 247
    104c:	08 c0       	rjmp	.+16     	; 0x105e <vMod_EXTI+0x80>
				break;
			case FALLING_EDGE:
				CLEAR_BIT(MCUCR,ISC10);
    104e:	85 b7       	in	r24, 0x35	; 53
    1050:	8b 7f       	andi	r24, 0xFB	; 251
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <vMod_EXTI+0x7a>
				SET_BIT(MCUCR,ISC11);
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    1054:	85 b7       	in	r24, 0x35	; 53
    1056:	84 60       	ori	r24, 0x04	; 4
    1058:	85 bf       	out	0x35, r24	; 53
				SET_BIT(MCUCR,ISC11);
    105a:	85 b7       	in	r24, 0x35	; 53
    105c:	88 60       	ori	r24, 0x08	; 8
    105e:	85 bf       	out	0x35, r24	; 53
    1060:	08 95       	ret
				break;
			}
			break;
			case EXTI2:
				switch(MODE){
    1062:	62 30       	cpi	r22, 0x02	; 2
    1064:	19 f0       	breq	.+6      	; 0x106c <vMod_EXTI+0x8e>
    1066:	63 30       	cpi	r22, 0x03	; 3
    1068:	41 f4       	brne	.+16     	; 0x107a <vMod_EXTI+0x9c>
    106a:	04 c0       	rjmp	.+8      	; 0x1074 <vMod_EXTI+0x96>
				case FALLING_EDGE:
					CLEAR_BIT(MCUCSR,ISC2);
    106c:	84 b7       	in	r24, 0x34	; 52
    106e:	8f 7b       	andi	r24, 0xBF	; 191
    1070:	84 bf       	out	0x34, r24	; 52
    1072:	08 95       	ret
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    1074:	84 b7       	in	r24, 0x34	; 52
    1076:	80 64       	ori	r24, 0x40	; 64
    1078:	84 bf       	out	0x34, r24	; 52
    107a:	08 95       	ret

0000107c <vSetPinDirection>:
#include"DIO_Interface.h"
#include "../../ROAD_MAP/ROAD_MAP.h"
#include <util/delay.h>
void vSetPinDirection(u8 copyu8_PORT , u8 copyu8_PIN , u8 copyu8_DIRECTION)
{
	switch(copyu8_DIRECTION){
    107c:	44 23       	and	r20, r20
    107e:	c9 f1       	breq	.+114    	; 0x10f2 <vSetPinDirection+0x76>
    1080:	41 30       	cpi	r20, 0x01	; 1
    1082:	09 f0       	breq	.+2      	; 0x1086 <vSetPinDirection+0xa>
    1084:	6e c0       	rjmp	.+220    	; 0x1162 <vSetPinDirection+0xe6>
	case output :
		switch(copyu8_PORT){
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	99 f0       	breq	.+38     	; 0x10b0 <vSetPinDirection+0x34>
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	30 f0       	brcs	.+12     	; 0x109a <vSetPinDirection+0x1e>
    108e:	82 30       	cpi	r24, 0x02	; 2
    1090:	d1 f0       	breq	.+52     	; 0x10c6 <vSetPinDirection+0x4a>
    1092:	83 30       	cpi	r24, 0x03	; 3
    1094:	09 f0       	breq	.+2      	; 0x1098 <vSetPinDirection+0x1c>
    1096:	65 c0       	rjmp	.+202    	; 0x1162 <vSetPinDirection+0xe6>
    1098:	21 c0       	rjmp	.+66     	; 0x10dc <vSetPinDirection+0x60>
		case PORT_A:SET_BIT(DDRA,copyu8_PIN); break;
    109a:	2a b3       	in	r18, 0x1a	; 26
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <vSetPinDirection+0x2a>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	6a 95       	dec	r22
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <vSetPinDirection+0x26>
    10aa:	28 2b       	or	r18, r24
    10ac:	2a bb       	out	0x1a, r18	; 26
    10ae:	08 95       	ret
		case PORT_B:SET_BIT(DDRB,copyu8_PIN); break;
    10b0:	27 b3       	in	r18, 0x17	; 23
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <vSetPinDirection+0x40>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	6a 95       	dec	r22
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <vSetPinDirection+0x3c>
    10c0:	28 2b       	or	r18, r24
    10c2:	27 bb       	out	0x17, r18	; 23
    10c4:	08 95       	ret
		case PORT_C:SET_BIT(DDRC,copyu8_PIN); break;
    10c6:	24 b3       	in	r18, 0x14	; 20
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <vSetPinDirection+0x56>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	6a 95       	dec	r22
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <vSetPinDirection+0x52>
    10d6:	28 2b       	or	r18, r24
    10d8:	24 bb       	out	0x14, r18	; 20
    10da:	08 95       	ret
		case PORT_D:SET_BIT(DDRD,copyu8_PIN); break;
    10dc:	21 b3       	in	r18, 0x11	; 17
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <vSetPinDirection+0x6c>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	6a 95       	dec	r22
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <vSetPinDirection+0x68>
    10ec:	28 2b       	or	r18, r24
    10ee:	21 bb       	out	0x11, r18	; 17
    10f0:	08 95       	ret

		}
		break;
		case input :
			switch(copyu8_PORT){
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	99 f0       	breq	.+38     	; 0x111c <vSetPinDirection+0xa0>
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	28 f0       	brcs	.+10     	; 0x1104 <vSetPinDirection+0x88>
    10fa:	82 30       	cpi	r24, 0x02	; 2
    10fc:	d9 f0       	breq	.+54     	; 0x1134 <vSetPinDirection+0xb8>
    10fe:	83 30       	cpi	r24, 0x03	; 3
    1100:	81 f5       	brne	.+96     	; 0x1162 <vSetPinDirection+0xe6>
    1102:	24 c0       	rjmp	.+72     	; 0x114c <vSetPinDirection+0xd0>
			case PORT_A:CLEAR_BIT(DDRA,copyu8_PIN); break;
    1104:	2a b3       	in	r18, 0x1a	; 26
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <vSetPinDirection+0x94>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	6a 95       	dec	r22
    1112:	e2 f7       	brpl	.-8      	; 0x110c <vSetPinDirection+0x90>
    1114:	80 95       	com	r24
    1116:	82 23       	and	r24, r18
    1118:	8a bb       	out	0x1a, r24	; 26
    111a:	08 95       	ret
			case PORT_B:CLEAR_BIT(DDRB,copyu8_PIN); break;
    111c:	27 b3       	in	r18, 0x17	; 23
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <vSetPinDirection+0xac>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	6a 95       	dec	r22
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <vSetPinDirection+0xa8>
    112c:	80 95       	com	r24
    112e:	82 23       	and	r24, r18
    1130:	87 bb       	out	0x17, r24	; 23
    1132:	08 95       	ret
			case PORT_C:CLEAR_BIT(DDRC,copyu8_PIN); break;
    1134:	24 b3       	in	r18, 0x14	; 20
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <vSetPinDirection+0xc4>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	6a 95       	dec	r22
    1142:	e2 f7       	brpl	.-8      	; 0x113c <vSetPinDirection+0xc0>
    1144:	80 95       	com	r24
    1146:	82 23       	and	r24, r18
    1148:	84 bb       	out	0x14, r24	; 20
    114a:	08 95       	ret
			case PORT_D:CLEAR_BIT(DDRD,copyu8_PIN); break;
    114c:	21 b3       	in	r18, 0x11	; 17
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <vSetPinDirection+0xdc>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	6a 95       	dec	r22
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <vSetPinDirection+0xd8>
    115c:	80 95       	com	r24
    115e:	82 23       	and	r24, r18
    1160:	81 bb       	out	0x11, r24	; 17
    1162:	08 95       	ret

00001164 <vPinValue>:
			break;
	}
}

void vPinValue(u8 copyu8_PORT , u8 copyu8_PIN , u8 copyu8_OutputValue){
	switch(copyu8_OutputValue){
    1164:	44 23       	and	r20, r20
    1166:	c9 f1       	breq	.+114    	; 0x11da <vPinValue+0x76>
    1168:	41 30       	cpi	r20, 0x01	; 1
    116a:	09 f0       	breq	.+2      	; 0x116e <vPinValue+0xa>
    116c:	6e c0       	rjmp	.+220    	; 0x124a <vPinValue+0xe6>
	case HIGH :
		switch(copyu8_PORT){
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	99 f0       	breq	.+38     	; 0x1198 <vPinValue+0x34>
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	30 f0       	brcs	.+12     	; 0x1182 <vPinValue+0x1e>
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	d1 f0       	breq	.+52     	; 0x11ae <vPinValue+0x4a>
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	09 f0       	breq	.+2      	; 0x1180 <vPinValue+0x1c>
    117e:	65 c0       	rjmp	.+202    	; 0x124a <vPinValue+0xe6>
    1180:	21 c0       	rjmp	.+66     	; 0x11c4 <vPinValue+0x60>
		case PORT_A:SET_BIT(PORTA,copyu8_PIN); break;
    1182:	2b b3       	in	r18, 0x1b	; 27
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 c0       	rjmp	.+4      	; 0x118e <vPinValue+0x2a>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	6a 95       	dec	r22
    1190:	e2 f7       	brpl	.-8      	; 0x118a <vPinValue+0x26>
    1192:	28 2b       	or	r18, r24
    1194:	2b bb       	out	0x1b, r18	; 27
    1196:	08 95       	ret
		case PORT_B:SET_BIT(PORTB,copyu8_PIN); break;
    1198:	28 b3       	in	r18, 0x18	; 24
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <vPinValue+0x40>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	6a 95       	dec	r22
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <vPinValue+0x3c>
    11a8:	28 2b       	or	r18, r24
    11aa:	28 bb       	out	0x18, r18	; 24
    11ac:	08 95       	ret
		case PORT_C:SET_BIT(PORTC,copyu8_PIN); break;
    11ae:	25 b3       	in	r18, 0x15	; 21
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <vPinValue+0x56>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	6a 95       	dec	r22
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <vPinValue+0x52>
    11be:	28 2b       	or	r18, r24
    11c0:	25 bb       	out	0x15, r18	; 21
    11c2:	08 95       	ret
		case PORT_D:SET_BIT(PORTD,copyu8_PIN); break;
    11c4:	22 b3       	in	r18, 0x12	; 18
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <vPinValue+0x6c>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	6a 95       	dec	r22
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <vPinValue+0x68>
    11d4:	28 2b       	or	r18, r24
    11d6:	22 bb       	out	0x12, r18	; 18
    11d8:	08 95       	ret

		}
		break;
		case LOW :
			switch(copyu8_PORT){
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	99 f0       	breq	.+38     	; 0x1204 <vPinValue+0xa0>
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	28 f0       	brcs	.+10     	; 0x11ec <vPinValue+0x88>
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	d9 f0       	breq	.+54     	; 0x121c <vPinValue+0xb8>
    11e6:	83 30       	cpi	r24, 0x03	; 3
    11e8:	81 f5       	brne	.+96     	; 0x124a <vPinValue+0xe6>
    11ea:	24 c0       	rjmp	.+72     	; 0x1234 <vPinValue+0xd0>
			case PORT_A:CLEAR_BIT(PORTA,copyu8_PIN); break;
    11ec:	2b b3       	in	r18, 0x1b	; 27
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <vPinValue+0x94>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	6a 95       	dec	r22
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <vPinValue+0x90>
    11fc:	80 95       	com	r24
    11fe:	82 23       	and	r24, r18
    1200:	8b bb       	out	0x1b, r24	; 27
    1202:	08 95       	ret
			case PORT_B:CLEAR_BIT(PORTB,copyu8_PIN); break;
    1204:	28 b3       	in	r18, 0x18	; 24
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <vPinValue+0xac>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	6a 95       	dec	r22
    1212:	e2 f7       	brpl	.-8      	; 0x120c <vPinValue+0xa8>
    1214:	80 95       	com	r24
    1216:	82 23       	and	r24, r18
    1218:	88 bb       	out	0x18, r24	; 24
    121a:	08 95       	ret
			case PORT_C:CLEAR_BIT(PORTC,copyu8_PIN); break;
    121c:	25 b3       	in	r18, 0x15	; 21
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <vPinValue+0xc4>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	6a 95       	dec	r22
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <vPinValue+0xc0>
    122c:	80 95       	com	r24
    122e:	82 23       	and	r24, r18
    1230:	85 bb       	out	0x15, r24	; 21
    1232:	08 95       	ret
			case PORT_D:CLEAR_BIT(PORTD,copyu8_PIN); break;
    1234:	22 b3       	in	r18, 0x12	; 18
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <vPinValue+0xdc>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	6a 95       	dec	r22
    1242:	e2 f7       	brpl	.-8      	; 0x123c <vPinValue+0xd8>
    1244:	80 95       	com	r24
    1246:	82 23       	and	r24, r18
    1248:	82 bb       	out	0x12, r24	; 18
    124a:	08 95       	ret

0000124c <u8ReadPin>:
	}
}
u8 u8ReadPin(u8 copyu8_PORT , u8 copyu8_PIN){
	u8 Local_Get = 0;

	switch (copyu8_PORT){
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	51 f0       	breq	.+20     	; 0x1264 <u8ReadPin+0x18>
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	30 f0       	brcs	.+12     	; 0x1260 <u8ReadPin+0x14>
    1254:	82 30       	cpi	r24, 0x02	; 2
    1256:	41 f0       	breq	.+16     	; 0x1268 <u8ReadPin+0x1c>
    1258:	83 30       	cpi	r24, 0x03	; 3
    125a:	79 f0       	breq	.+30     	; 0x127a <u8ReadPin+0x2e>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	08 95       	ret
	case PORT_A: Local_Get = READ_BIT(PINA,copyu8_PIN);break;
    1260:	89 b3       	in	r24, 0x19	; 25
    1262:	03 c0       	rjmp	.+6      	; 0x126a <u8ReadPin+0x1e>
	case PORT_B: Local_Get = READ_BIT(PINB,copyu8_PIN);break;
    1264:	86 b3       	in	r24, 0x16	; 22
    1266:	01 c0       	rjmp	.+2      	; 0x126a <u8ReadPin+0x1e>
	case PORT_C: Local_Get = READ_BIT(PINC,copyu8_PIN);break;
    1268:	83 b3       	in	r24, 0x13	; 19
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <u8ReadPin+0x26>
    126e:	95 95       	asr	r25
    1270:	87 95       	ror	r24
    1272:	6a 95       	dec	r22
    1274:	e2 f7       	brpl	.-8      	; 0x126e <u8ReadPin+0x22>
    1276:	81 70       	andi	r24, 0x01	; 1
    1278:	08 95       	ret
	case PORT_D: Local_Get = READ_BIT(PIND,copyu8_PIN);break;
    127a:	80 b3       	in	r24, 0x10	; 16
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <u8ReadPin+0x38>
    1280:	95 95       	asr	r25
    1282:	87 95       	ror	r24
    1284:	6a 95       	dec	r22
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <u8ReadPin+0x34>
    1288:	81 70       	andi	r24, 0x01	; 1
	}
	return Local_Get;
}
    128a:	08 95       	ret

0000128c <vTogglePin>:
void vTogglePin(u8 copyu8_PORT ,u8 copyu8_PIN){
	switch(copyu8_PORT){
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	31 f1       	breq	.+76     	; 0x12dc <vTogglePin+0x50>
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	38 f0       	brcs	.+14     	; 0x12a2 <vTogglePin+0x16>
    1294:	82 30       	cpi	r24, 0x02	; 2
    1296:	09 f4       	brne	.+2      	; 0x129a <vTogglePin+0xe>
    1298:	3e c0       	rjmp	.+124    	; 0x1316 <vTogglePin+0x8a>
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	09 f0       	breq	.+2      	; 0x12a0 <vTogglePin+0x14>
    129e:	74 c0       	rjmp	.+232    	; 0x1388 <vTogglePin+0xfc>
    12a0:	57 c0       	rjmp	.+174    	; 0x1350 <vTogglePin+0xc4>
	case PORT_A:
		SET_BIT(DDRA,copyu8_PIN);
    12a2:	2a b3       	in	r18, 0x1a	; 26
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <vTogglePin+0x22>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	6a 95       	dec	r22
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <vTogglePin+0x1e>
    12b2:	98 2f       	mov	r25, r24
    12b4:	28 2b       	or	r18, r24
    12b6:	2a bb       	out	0x1a, r18	; 26
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12ba:	60 e9       	ldi	r22, 0x90	; 144
    12bc:	71 e0       	ldi	r23, 0x01	; 1
		for(u8 i = 0; i < 9; i++) {
			TOG_BIT(PORTA,copyu8_PIN);
    12be:	8b b3       	in	r24, 0x1b	; 27
    12c0:	89 27       	eor	r24, r25
    12c2:	8b bb       	out	0x1b, r24	; 27
    12c4:	28 eb       	ldi	r18, 0xB8	; 184
    12c6:	3b e0       	ldi	r19, 0x0B	; 11
    12c8:	fb 01       	movw	r30, r22
    12ca:	31 97       	sbiw	r30, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <vTogglePin+0x3e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ce:	21 50       	subi	r18, 0x01	; 1
    12d0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d2:	d1 f7       	brne	.-12     	; 0x12c8 <vTogglePin+0x3c>
}
void vTogglePin(u8 copyu8_PORT ,u8 copyu8_PIN){
	switch(copyu8_PORT){
	case PORT_A:
		SET_BIT(DDRA,copyu8_PIN);
		for(u8 i = 0; i < 9; i++) {
    12d4:	4f 5f       	subi	r20, 0xFF	; 255
    12d6:	49 30       	cpi	r20, 0x09	; 9
    12d8:	91 f7       	brne	.-28     	; 0x12be <vTogglePin+0x32>
    12da:	08 95       	ret
			TOG_BIT(PORTA,copyu8_PIN);
			_delay_ms(300);
		}
		break;
	case PORT_B:
		SET_BIT(DDRB,copyu8_PIN);
    12dc:	27 b3       	in	r18, 0x17	; 23
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <vTogglePin+0x5c>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	6a 95       	dec	r22
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <vTogglePin+0x58>
    12ec:	98 2f       	mov	r25, r24
    12ee:	28 2b       	or	r18, r24
    12f0:	27 bb       	out	0x17, r18	; 23
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	60 e9       	ldi	r22, 0x90	; 144
    12f6:	71 e0       	ldi	r23, 0x01	; 1
		for(u8 i = 0; i < 9; i++) {
			TOG_BIT(PORTB,copyu8_PIN);
    12f8:	88 b3       	in	r24, 0x18	; 24
    12fa:	89 27       	eor	r24, r25
    12fc:	88 bb       	out	0x18, r24	; 24
    12fe:	28 eb       	ldi	r18, 0xB8	; 184
    1300:	3b e0       	ldi	r19, 0x0B	; 11
    1302:	fb 01       	movw	r30, r22
    1304:	31 97       	sbiw	r30, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <vTogglePin+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1308:	21 50       	subi	r18, 0x01	; 1
    130a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130c:	d1 f7       	brne	.-12     	; 0x1302 <vTogglePin+0x76>
			_delay_ms(300);
		}
		break;
	case PORT_B:
		SET_BIT(DDRB,copyu8_PIN);
		for(u8 i = 0; i < 9; i++) {
    130e:	4f 5f       	subi	r20, 0xFF	; 255
    1310:	49 30       	cpi	r20, 0x09	; 9
    1312:	91 f7       	brne	.-28     	; 0x12f8 <vTogglePin+0x6c>
    1314:	08 95       	ret
			TOG_BIT(PORTB,copyu8_PIN);
			_delay_ms(300);
		}
		break;
	case PORT_C:
		SET_BIT(DDRC,copyu8_PIN);
    1316:	24 b3       	in	r18, 0x14	; 20
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <vTogglePin+0x96>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	6a 95       	dec	r22
    1324:	e2 f7       	brpl	.-8      	; 0x131e <vTogglePin+0x92>
    1326:	98 2f       	mov	r25, r24
    1328:	28 2b       	or	r18, r24
    132a:	24 bb       	out	0x14, r18	; 20
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	60 e9       	ldi	r22, 0x90	; 144
    1330:	71 e0       	ldi	r23, 0x01	; 1
		for(u8 i = 0; i < 9; i++) {
			TOG_BIT(PORTC,copyu8_PIN);
    1332:	85 b3       	in	r24, 0x15	; 21
    1334:	89 27       	eor	r24, r25
    1336:	85 bb       	out	0x15, r24	; 21
    1338:	28 eb       	ldi	r18, 0xB8	; 184
    133a:	3b e0       	ldi	r19, 0x0B	; 11
    133c:	fb 01       	movw	r30, r22
    133e:	31 97       	sbiw	r30, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <vTogglePin+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1342:	21 50       	subi	r18, 0x01	; 1
    1344:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1346:	d1 f7       	brne	.-12     	; 0x133c <vTogglePin+0xb0>
			_delay_ms(300);
		}
		break;
	case PORT_C:
		SET_BIT(DDRC,copyu8_PIN);
		for(u8 i = 0; i < 9; i++) {
    1348:	4f 5f       	subi	r20, 0xFF	; 255
    134a:	49 30       	cpi	r20, 0x09	; 9
    134c:	91 f7       	brne	.-28     	; 0x1332 <vTogglePin+0xa6>
    134e:	08 95       	ret
			TOG_BIT(PORTC,copyu8_PIN);
			_delay_ms(300);
		}
		break;
	case PORT_D:
		SET_BIT(DDRD,copyu8_PIN);
    1350:	21 b3       	in	r18, 0x11	; 17
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 c0       	rjmp	.+4      	; 0x135c <vTogglePin+0xd0>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	6a 95       	dec	r22
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <vTogglePin+0xcc>
    1360:	98 2f       	mov	r25, r24
    1362:	28 2b       	or	r18, r24
    1364:	21 bb       	out	0x11, r18	; 17
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	60 e9       	ldi	r22, 0x90	; 144
    136a:	71 e0       	ldi	r23, 0x01	; 1
		for(u8 i = 0; i < 9; i++) {
			TOG_BIT(PORTD,copyu8_PIN);
    136c:	82 b3       	in	r24, 0x12	; 18
    136e:	89 27       	eor	r24, r25
    1370:	82 bb       	out	0x12, r24	; 18
    1372:	28 eb       	ldi	r18, 0xB8	; 184
    1374:	3b e0       	ldi	r19, 0x0B	; 11
    1376:	fb 01       	movw	r30, r22
    1378:	31 97       	sbiw	r30, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <vTogglePin+0xec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137c:	21 50       	subi	r18, 0x01	; 1
    137e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1380:	d1 f7       	brne	.-12     	; 0x1376 <vTogglePin+0xea>
			_delay_ms(300);
		}
		break;
	case PORT_D:
		SET_BIT(DDRD,copyu8_PIN);
		for(u8 i = 0; i < 9; i++) {
    1382:	4f 5f       	subi	r20, 0xFF	; 255
    1384:	49 30       	cpi	r20, 0x09	; 9
    1386:	91 f7       	brne	.-28     	; 0x136c <vTogglePin+0xe0>
    1388:	08 95       	ret

0000138a <vSetPortDirection>:
		}
		break;
	}
}
void vSetPortDirection(u8 copyu8_PORT,u8 ValueDirection){
	switch (copyu8_PORT) {
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	49 f0       	breq	.+18     	; 0x13a0 <vSetPortDirection+0x16>
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	28 f0       	brcs	.+10     	; 0x139c <vSetPortDirection+0x12>
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	39 f0       	breq	.+14     	; 0x13a4 <vSetPortDirection+0x1a>
    1396:	83 30       	cpi	r24, 0x03	; 3
    1398:	41 f4       	brne	.+16     	; 0x13aa <vSetPortDirection+0x20>
    139a:	06 c0       	rjmp	.+12     	; 0x13a8 <vSetPortDirection+0x1e>
	case PORT_A: DDRA = ValueDirection; break;
    139c:	6a bb       	out	0x1a, r22	; 26
    139e:	08 95       	ret
	case PORT_B: DDRB = ValueDirection; break;
    13a0:	67 bb       	out	0x17, r22	; 23
    13a2:	08 95       	ret
	case PORT_C: DDRC = ValueDirection; break;
    13a4:	64 bb       	out	0x14, r22	; 20
    13a6:	08 95       	ret
	case PORT_D: DDRD = ValueDirection; break;
    13a8:	61 bb       	out	0x11, r22	; 17
    13aa:	08 95       	ret

000013ac <vSetPortValue>:
	}
}
void vSetPortValue(u8 copyu8_PORT, u8 Value) {
	switch (copyu8_PORT) {
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	49 f0       	breq	.+18     	; 0x13c2 <vSetPortValue+0x16>
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	28 f0       	brcs	.+10     	; 0x13be <vSetPortValue+0x12>
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	39 f0       	breq	.+14     	; 0x13c6 <vSetPortValue+0x1a>
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	41 f4       	brne	.+16     	; 0x13cc <vSetPortValue+0x20>
    13bc:	06 c0       	rjmp	.+12     	; 0x13ca <vSetPortValue+0x1e>
	case PORT_A: PORTA = Value; break;
    13be:	6b bb       	out	0x1b, r22	; 27
    13c0:	08 95       	ret
	case PORT_B: PORTB = Value; break;
    13c2:	68 bb       	out	0x18, r22	; 24
    13c4:	08 95       	ret
	case PORT_C: PORTC = Value; break;
    13c6:	65 bb       	out	0x15, r22	; 21
    13c8:	08 95       	ret
	case PORT_D: PORTD = Value; break;
    13ca:	62 bb       	out	0x12, r22	; 18
    13cc:	08 95       	ret

000013ce <vTogglePort>:
	}
}

void vTogglePort(u8 copyu8_PORT){
	switch(copyu8_PORT){
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	69 f0       	breq	.+26     	; 0x13ec <vTogglePort+0x1e>
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	28 f0       	brcs	.+10     	; 0x13e0 <vTogglePort+0x12>
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	79 f0       	breq	.+30     	; 0x13f8 <vTogglePort+0x2a>
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	c1 f4       	brne	.+48     	; 0x140e <vTogglePort+0x40>
    13de:	12 c0       	rjmp	.+36     	; 0x1404 <vTogglePort+0x36>
	case PORT_A:
		DDRA = PortStatusOutput;
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
    13e2:	8a bb       	out	0x1a, r24	; 26
		PORTA ^= PortStatusOutput;break;
    13e4:	8b b3       	in	r24, 0x1b	; 27
    13e6:	80 95       	com	r24
    13e8:	8b bb       	out	0x1b, r24	; 27
    13ea:	08 95       	ret
	case PORT_B:
		DDRB = PortStatusOutput;
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	87 bb       	out	0x17, r24	; 23
		PORTB ^= PortStatusOutput;break;
    13f0:	88 b3       	in	r24, 0x18	; 24
    13f2:	80 95       	com	r24
    13f4:	88 bb       	out	0x18, r24	; 24
    13f6:	08 95       	ret
	case PORT_C:
		DDRC = PortStatusOutput;
    13f8:	8f ef       	ldi	r24, 0xFF	; 255
    13fa:	84 bb       	out	0x14, r24	; 20
		PORTC ^= PortStatusOutput;break;
    13fc:	85 b3       	in	r24, 0x15	; 21
    13fe:	80 95       	com	r24
    1400:	85 bb       	out	0x15, r24	; 21
    1402:	08 95       	ret
	case PORT_D:
		DDRD = PortStatusOutput;
    1404:	8f ef       	ldi	r24, 0xFF	; 255
    1406:	81 bb       	out	0x11, r24	; 17
		PORTD ^= PortStatusOutput;break;
    1408:	82 b3       	in	r24, 0x12	; 18
    140a:	80 95       	com	r24
    140c:	82 bb       	out	0x12, r24	; 18
    140e:	08 95       	ret

00001410 <vEnableADC>:
#include "../../ROAD_MAP/ROAD_MAP.h"
#include "../../Config/ADC_Config.h"
#include "ADC_Interface.h"

void vEnableADC(void){
	SET_BIT(ADCSRA,ADIF);
    1410:	34 9a       	sbi	0x06, 4	; 6
}
    1412:	08 95       	ret

00001414 <vDisableADC>:

void vDisableADC(void){
	CLEAR_BIT(ADCSRA,ADEN);
    1414:	37 98       	cbi	0x06, 7	; 6
}
    1416:	08 95       	ret

00001418 <vADCInit>:

void vADCInit(void){

	/*SET THE VOLTAGEREF TO MODE*/
	ADMUX &= 0b00111111; //Clear The Voltage Bits
    1418:	87 b1       	in	r24, 0x07	; 7
    141a:	8f 73       	andi	r24, 0x3F	; 63
    141c:	87 b9       	out	0x07, r24	; 7
	ADMUX |= ADC_VOLTAGE_MODE<<6;
    141e:	3e 9a       	sbi	0x07, 6	; 7

	/*SET THE PRESCALLER ACORDING TO MODE*/
	ADCSRA &= 0b11111000; //CLear The Prescaller Bits
    1420:	86 b1       	in	r24, 0x06	; 6
    1422:	88 7f       	andi	r24, 0xF8	; 248
    1424:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= ADC_PRESCALER_MODE;
    1426:	86 b1       	in	r24, 0x06	; 6
    1428:	87 60       	ori	r24, 0x07	; 7
    142a:	86 b9       	out	0x06, r24	; 6

	/*ENABLE THE ADC*/
	SET_BIT(ADCSRA,ADEN);
    142c:	37 9a       	sbi	0x06, 7	; 6
}
    142e:	08 95       	ret

00001430 <u16ADCRead>:

u16 u16ADCRead(u8 Channel){

	//SELECT CHANNEL
	ADMUX &= 0b11100000; //Clear MUX BITS
    1430:	97 b1       	in	r25, 0x07	; 7
    1432:	90 7e       	andi	r25, 0xE0	; 224
    1434:	97 b9       	out	0x07, r25	; 7
	ADMUX |= Channel;
    1436:	97 b1       	in	r25, 0x07	; 7
    1438:	98 2b       	or	r25, r24
    143a:	97 b9       	out	0x07, r25	; 7

	//START CONVERSION
	SET_BIT(ADCSRA,ADSC);
    143c:	36 9a       	sbi	0x06, 6	; 6

	//STUCK THE HARDWARE FLAG
	while(READ_BIT(ADCSRA,ADIF)==0);
    143e:	34 9b       	sbis	0x06, 4	; 6
    1440:	fe cf       	rjmp	.-4      	; 0x143e <u16ADCRead+0xe>

	//CLEAR THE HARDWARE FLAG
	SET_BIT(ADCSRA,ADIF);
    1442:	34 9a       	sbi	0x06, 4	; 6
	return ADCL_REG;
    1444:	24 b1       	in	r18, 0x04	; 4
    1446:	35 b1       	in	r19, 0x05	; 5
}
    1448:	c9 01       	movw	r24, r18
    144a:	08 95       	ret

0000144c <SERVO_ANGLE>:
#include"../../MCAL/DIO/DIO_Interface.h"
#include "../../MCAL/Timer/Timer_Interface.h"
#include "ServoMotor_Interface.h"
#include "../../ROAD_MAP/ROAD_MAP.h"
void SERVO_ANGLE(s8 angle){
	 SET_BIT(TCCR1A,COM1A1);
    144c:	9f b5       	in	r25, 0x2f	; 47
    144e:	90 68       	ori	r25, 0x80	; 128
    1450:	9f bd       	out	0x2f, r25	; 47
	   CLEAR_BIT(TCCR1A,COM1A0);
    1452:	9f b5       	in	r25, 0x2f	; 47
    1454:	9f 7b       	andi	r25, 0xBF	; 191
    1456:	9f bd       	out	0x2f, r25	; 47

	   // SELECT TIMEFR1 MODE 14
	   CLEAR_BIT(TCCR1A,WGM10);
    1458:	9f b5       	in	r25, 0x2f	; 47
    145a:	9e 7f       	andi	r25, 0xFE	; 254
    145c:	9f bd       	out	0x2f, r25	; 47
	   SET_BIT(TCCR1A , WGM11);
    145e:	9f b5       	in	r25, 0x2f	; 47
    1460:	92 60       	ori	r25, 0x02	; 2
    1462:	9f bd       	out	0x2f, r25	; 47
	   SET_BIT(TCCR1B,WGM12);
    1464:	9e b5       	in	r25, 0x2e	; 46
    1466:	98 60       	ori	r25, 0x08	; 8
    1468:	9e bd       	out	0x2e, r25	; 46
	   SET_BIT(TCCR1B,WGM13);
    146a:	9e b5       	in	r25, 0x2e	; 46
    146c:	90 61       	ori	r25, 0x10	; 16
    146e:	9e bd       	out	0x2e, r25	; 46
	   // SELECT PRESCALLER 256
	   CLEAR_BIT(TCCR1B,CS10);
    1470:	9e b5       	in	r25, 0x2e	; 46
    1472:	9e 7f       	andi	r25, 0xFE	; 254
    1474:	9e bd       	out	0x2e, r25	; 46
	   CLEAR_BIT(TCCR1B,CS11);
    1476:	9e b5       	in	r25, 0x2e	; 46
    1478:	9d 7f       	andi	r25, 0xFD	; 253
    147a:	9e bd       	out	0x2e, r25	; 46
	   SET_BIT(TCCR1B,CS12);
    147c:	9e b5       	in	r25, 0x2e	; 46
    147e:	94 60       	ori	r25, 0x04	; 4
    1480:	9e bd       	out	0x2e, r25	; 46

	   ICR1 = 1250;
    1482:	22 ee       	ldi	r18, 0xE2	; 226
    1484:	34 e0       	ldi	r19, 0x04	; 4
    1486:	37 bd       	out	0x27, r19	; 39
    1488:	26 bd       	out	0x26, r18	; 38
	   OCR1A =angle ;
    148a:	99 27       	eor	r25, r25
    148c:	87 fd       	sbrc	r24, 7
    148e:	90 95       	com	r25
    1490:	9b bd       	out	0x2b, r25	; 43
    1492:	8a bd       	out	0x2a, r24	; 42
}
    1494:	08 95       	ret

00001496 <u32UltraSonicMeasure>:
}

u32 u32UltraSonicMeasure(){
	u32 pulse_width=0;
	//vUltraSonicInit();
	vPinValue(TrigPort, TrigPin, LOW);
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	67 e0       	ldi	r22, 0x07	; 7
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14a0:	8a e0       	ldi	r24, 0x0A	; 10
    14a2:	8a 95       	dec	r24
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <u32UltraSonicMeasure+0xc>
	_delay_us(2);
	vPinValue(TrigPort, TrigPin, HIGH);
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	67 e0       	ldi	r22, 0x07	; 7
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
    14b0:	85 e3       	ldi	r24, 0x35	; 53
    14b2:	8a 95       	dec	r24
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <u32UltraSonicMeasure+0x1c>
	_delay_us(10);
	vPinValue(TrigPort, TrigPin, LOW);
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	67 e0       	ldi	r22, 0x07	; 7
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	//trigter the trig pin

	// wait for echo to become high
	while (!u8ReadPin(EchoPort, EchoPin));
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	66 e0       	ldi	r22, 0x06	; 6
    14c4:	0e 94 26 09 	call	0x124c	; 0x124c <u8ReadPin>
    14c8:	88 23       	and	r24, r24
    14ca:	d1 f3       	breq	.-12     	; 0x14c0 <u32UltraSonicMeasure+0x2a>
	//reset timer 0
	vPreload_Timer(0);
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	0e 94 c8 06 	call	0xd90	; 0xd90 <vPreload_Timer>

	//wait echo to become low
	while (u8ReadPin(EchoPort, EchoPin));
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	66 e0       	ldi	r22, 0x06	; 6
    14d6:	0e 94 26 09 	call	0x124c	; 0x124c <u8ReadPin>
    14da:	88 23       	and	r24, r24
    14dc:	d1 f7       	brne	.-12     	; 0x14d2 <u32UltraSonicMeasure+0x3c>
	//read the pulse
	pulse_width= (TCNT0 +((u32)255* 1))*0.0625;	//convert it to mm
    14de:	62 b7       	in	r22, 0x32	; 50
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	61 50       	subi	r22, 0x01	; 1
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	8f 4f       	sbci	r24, 0xFF	; 255
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	0e 94 9d 03 	call	0x73a	; 0x73a <__floatunsisf>
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	5d e3       	ldi	r21, 0x3D	; 61
    14fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1502:	28 ee       	ldi	r18, 0xE8	; 232
    1504:	33 e0       	ldi	r19, 0x03	; 3
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__mulsi3>
    150e:	2a e3       	ldi	r18, 0x3A	; 58
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e0       	ldi	r20, 0x00	; 0
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	0e 94 26 11 	call	0x224c	; 0x224c <__udivmodsi4>
    151a:	ca 01       	movw	r24, r20
	u32 distance_mm = ((u32)pulse_width*1000) / 58;  // For no prescaler and system clock


	return distance_mm;

}
    151c:	b9 01       	movw	r22, r18
    151e:	08 95       	ret

00001520 <vUltraSonicInit>:

	return Read;
}
void vUltraSonicInit(void){

	vSetPinDirection(TrigPort,TrigPin,output);
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	67 e0       	ldi	r22, 0x07	; 7
    1524:	41 e0       	ldi	r20, 0x01	; 1
    1526:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vSetPinDirection(EchoPort,EchoPin,input);
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	66 e0       	ldi	r22, 0x06	; 6
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vPinValue(TrigPort, TrigPin, LOW);
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	67 e0       	ldi	r22, 0x07	; 7
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>

}
    153e:	08 95       	ret

00001540 <u8DigitalFlameRead>:
	temp = u16ADCVoltRead(Channel) /10;
	return temp;
}
u8 u8DigitalFlameRead(){
	u8 Read =0;
	vSetPinDirection(DIGITAL_PORT,DIGITAL_PIN,input);
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	62 e0       	ldi	r22, 0x02	; 2
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	Read = u8ReadPin(DIGITAL_PORT,DIGITAL_PIN);
    154a:	83 e0       	ldi	r24, 0x03	; 3
    154c:	62 e0       	ldi	r22, 0x02	; 2
    154e:	0e 94 26 09 	call	0x124c	; 0x124c <u8ReadPin>

	return Read;
}
    1552:	08 95       	ret

00001554 <u16ADCVoltRead>:
#include "../../MCAL/ADC/ADC_Interface.h"


u16 u16ADCVoltRead(u8 Channel){
	u16 volt =0;
	volt = (((u32)5000*u16ADCRead(Channel))/1023);
    1554:	0e 94 18 0a 	call	0x1430	; 0x1430 <u16ADCRead>
    1558:	a0 e0       	ldi	r26, 0x00	; 0
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	28 e8       	ldi	r18, 0x88	; 136
    1562:	33 e1       	ldi	r19, 0x13	; 19
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__mulsi3>
    156c:	2f ef       	ldi	r18, 0xFF	; 255
    156e:	33 e0       	ldi	r19, 0x03	; 3
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	0e 94 26 11 	call	0x224c	; 0x224c <__udivmodsi4>
    1578:	c9 01       	movw	r24, r18
	return volt;

}
    157a:	08 95       	ret

0000157c <u16ADCTempRead>:
u16 u16ADCTempRead(u8 Channel){
	u16 temp = 0;
	temp = u16ADCVoltRead(Channel) /10;
    157c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <u16ADCVoltRead>
    1580:	6a e0       	ldi	r22, 0x0A	; 10
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__udivmodhi4>
    1588:	cb 01       	movw	r24, r22
	return temp;
}
    158a:	08 95       	ret

0000158c <LcdWriteData>:
	vPinValue(PORT_E,PIN_E,HIGH);
	_delay_us(500);
	vPinValue(PORT_E,PIN_E,LOW);

}
void LcdWriteData(u8 data){
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	1f 93       	push	r17
    1592:	18 2f       	mov	r17, r24
	vPinValue(PORT_RS,PIN_RS,HIGH);
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	61 e0       	ldi	r22, 0x01	; 1
    1598:	41 e0       	ldi	r20, 0x01	; 1
    159a:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(PORT_RW,PIN_RW,LOW);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	62 e0       	ldi	r22, 0x02	; 2
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>

	vPinValue(PORT_D7,PIN_D7,READ_BIT(data,7));
    15a8:	41 2f       	mov	r20, r17
    15aa:	44 1f       	adc	r20, r20
    15ac:	44 27       	eor	r20, r20
    15ae:	44 1f       	adc	r20, r20
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	67 e0       	ldi	r22, 0x07	; 7
    15b4:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(PORT_D6,PIN_D6,READ_BIT(data,6));
    15b8:	41 2f       	mov	r20, r17
    15ba:	42 95       	swap	r20
    15bc:	46 95       	lsr	r20
    15be:	46 95       	lsr	r20
    15c0:	41 70       	andi	r20, 0x01	; 1
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	66 e0       	ldi	r22, 0x06	; 6
    15c6:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(PORT_D5,PIN_D5,READ_BIT(data,5));
    15ca:	41 2f       	mov	r20, r17
    15cc:	42 95       	swap	r20
    15ce:	46 95       	lsr	r20
    15d0:	41 70       	andi	r20, 0x01	; 1
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	65 e0       	ldi	r22, 0x05	; 5
    15d6:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(PORT_D4,PIN_D4,READ_BIT(data,4));
    15da:	41 2f       	mov	r20, r17
    15dc:	42 95       	swap	r20
    15de:	41 70       	andi	r20, 0x01	; 1
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	64 e0       	ldi	r22, 0x04	; 4
    15e4:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>

	vPinValue(PORT_E,PIN_E,HIGH);
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	63 e0       	ldi	r22, 0x03	; 3
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15f2:	80 ed       	ldi	r24, 0xD0	; 208
    15f4:	e8 2e       	mov	r14, r24
    15f6:	87 e0       	ldi	r24, 0x07	; 7
    15f8:	f8 2e       	mov	r15, r24
    15fa:	c7 01       	movw	r24, r14
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <LcdWriteData+0x70>
	_delay_us(500);
	vPinValue(PORT_E,PIN_E,LOW);
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	63 e0       	ldi	r22, 0x03	; 3
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>

	vPinValue(PORT_D7,PIN_D7,READ_BIT(data,3));
    160a:	41 2f       	mov	r20, r17
    160c:	46 95       	lsr	r20
    160e:	46 95       	lsr	r20
    1610:	46 95       	lsr	r20
    1612:	41 70       	andi	r20, 0x01	; 1
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	67 e0       	ldi	r22, 0x07	; 7
    1618:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(PORT_D6,PIN_D6,READ_BIT(data,2));
    161c:	41 2f       	mov	r20, r17
    161e:	46 95       	lsr	r20
    1620:	46 95       	lsr	r20
    1622:	41 70       	andi	r20, 0x01	; 1
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	66 e0       	ldi	r22, 0x06	; 6
    1628:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(PORT_D5,PIN_D5,READ_BIT(data,1));
    162c:	41 2f       	mov	r20, r17
    162e:	46 95       	lsr	r20
    1630:	41 70       	andi	r20, 0x01	; 1
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	65 e0       	ldi	r22, 0x05	; 5
    1636:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(PORT_D4,PIN_D4,READ_BIT(data,0));
    163a:	11 70       	andi	r17, 0x01	; 1
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	64 e0       	ldi	r22, 0x04	; 4
    1640:	41 2f       	mov	r20, r17
    1642:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>

	vPinValue(PORT_E,PIN_E,HIGH);
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	63 e0       	ldi	r22, 0x03	; 3
    164a:	41 e0       	ldi	r20, 0x01	; 1
    164c:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
    1650:	c7 01       	movw	r24, r14
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <LcdWriteData+0xc6>
	_delay_us(500);
	vPinValue(PORT_E,PIN_E,LOW);
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	63 e0       	ldi	r22, 0x03	; 3
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>

}
    1660:	1f 91       	pop	r17
    1662:	ff 90       	pop	r15
    1664:	ef 90       	pop	r14
    1666:	08 95       	ret

00001668 <vLcdWriteString>:
	vPinValue(PORT_E,PIN_E,HIGH);
	_delay_us(500);
	vPinValue(PORT_E,PIN_E,LOW);
}
#endif
void vLcdWriteString(u8 * str){
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	ec 01       	movw	r28, r24
    1670:	10 e0       	ldi	r17, 0x00	; 0
    1672:	03 c0       	rjmp	.+6      	; 0x167a <vLcdWriteString+0x12>
	u8 i = 0;
	while(str[i]){
		LcdWriteData(str[i]);
    1674:	0e 94 c6 0a 	call	0x158c	; 0x158c <LcdWriteData>
		i++;
    1678:	1f 5f       	subi	r17, 0xFF	; 255
	vPinValue(PORT_E,PIN_E,LOW);
}
#endif
void vLcdWriteString(u8 * str){
	u8 i = 0;
	while(str[i]){
    167a:	fe 01       	movw	r30, r28
    167c:	e1 0f       	add	r30, r17
    167e:	f1 1d       	adc	r31, r1
    1680:	80 81       	ld	r24, Z
    1682:	88 23       	and	r24, r24
    1684:	b9 f7       	brne	.-18     	; 0x1674 <vLcdWriteString+0xc>
	}

	//	for(u8 i =0; i <= str[i]; i++){
	//		LcdWriteData(str[i]);
	//	}
}
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	08 95       	ret

0000168e <vConvertNumbersToString>:
			LcdWriteCommand(ROW_2+Colum);

		}
	}
}
void vConvertNumbersToString(s32 num){
    168e:	6f 92       	push	r6
    1690:	7f 92       	push	r7
    1692:	9f 92       	push	r9
    1694:	af 92       	push	r10
    1696:	bf 92       	push	r11
    1698:	cf 92       	push	r12
    169a:	df 92       	push	r13
    169c:	ef 92       	push	r14
    169e:	ff 92       	push	r15
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	8c 01       	movw	r16, r24
		str[i]='\0';
		vLcdWriteString(str);

	}

}
    16ae:	6d b6       	in	r6, 0x3d	; 61
    16b0:	7e b6       	in	r7, 0x3e	; 62

		}
	}
}
void vConvertNumbersToString(s32 num){
	if(num == 0){
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	21 f4       	brne	.+8      	; 0x16be <vConvertNumbersToString+0x30>
		LcdWriteData('0');
    16b6:	80 e3       	ldi	r24, 0x30	; 48
    16b8:	0e 94 c6 0a 	call	0x158c	; 0x158c <LcdWriteData>
    16bc:	a9 c0       	rjmp	.+338    	; 0x1810 <vConvertNumbersToString+0x182>
		return ;

	}
	if(num > 0){
    16be:	18 16       	cp	r1, r24
    16c0:	19 06       	cpc	r1, r25
    16c2:	0c f0       	brlt	.+2      	; 0x16c6 <vConvertNumbersToString+0x38>
    16c4:	55 c0       	rjmp	.+170    	; 0x1770 <vConvertNumbersToString+0xe2>
    16c6:	ad b6       	in	r10, 0x3d	; 61
    16c8:	9e b6       	in	r9, 0x3e	; 62
		u8 Digit =0;
		u32 num1 = num;
    16ca:	b8 01       	movw	r22, r16
    16cc:	88 27       	eor	r24, r24
    16ce:	77 fd       	sbrc	r23, 7
    16d0:	80 95       	com	r24
    16d2:	98 2f       	mov	r25, r24
    16d4:	bb 24       	eor	r11, r11
		u8 i =0;
		while( num1 !=0){
			//		Digit = num1%10;
			num1 = num1/10;
    16d6:	2a e0       	ldi	r18, 0x0A	; 10
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	0e 94 26 11 	call	0x224c	; 0x224c <__udivmodsi4>
    16e2:	c9 01       	movw	r24, r18
    16e4:	da 01       	movw	r26, r20
    16e6:	bc 01       	movw	r22, r24
    16e8:	cd 01       	movw	r24, r26
			i++;
    16ea:	b3 94       	inc	r11
	}
	if(num > 0){
		u8 Digit =0;
		u32 num1 = num;
		u8 i =0;
		while( num1 !=0){
    16ec:	61 15       	cp	r22, r1
    16ee:	71 05       	cpc	r23, r1
    16f0:	81 05       	cpc	r24, r1
    16f2:	91 05       	cpc	r25, r1
    16f4:	81 f7       	brne	.-32     	; 0x16d6 <vConvertNumbersToString+0x48>
			//		Digit = num1%10;
			num1 = num1/10;
			i++;
		}
		u8 str[i+1];
    16f6:	eb 2c       	mov	r14, r11
    16f8:	ff 24       	eor	r15, r15
    16fa:	c7 01       	movw	r24, r14
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	2d b7       	in	r18, 0x3d	; 61
    1700:	3e b7       	in	r19, 0x3e	; 62
    1702:	28 1b       	sub	r18, r24
    1704:	39 0b       	sbc	r19, r25
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	3e bf       	out	0x3e, r19	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	2d bf       	out	0x3d, r18	; 61
    1710:	cd b6       	in	r12, 0x3d	; 61
    1712:	de b6       	in	r13, 0x3e	; 62
    1714:	08 94       	sec
    1716:	c1 1c       	adc	r12, r1
    1718:	d1 1c       	adc	r13, r1


		for(s8 j = i-1; j >=0; j--){
    171a:	4b 2d       	mov	r20, r11
    171c:	41 50       	subi	r20, 0x01	; 1
    171e:	e4 2f       	mov	r30, r20
    1720:	ff 27       	eor	r31, r31
    1722:	e7 fd       	sbrc	r30, 7
    1724:	f0 95       	com	r31
    1726:	ec 0d       	add	r30, r12
    1728:	fd 1d       	adc	r31, r13
    172a:	0f c0       	rjmp	.+30     	; 0x174a <vConvertNumbersToString+0xbc>
			Digit = (num % 10) + '0';//"ASCII Number"
			str[j]= Digit;
    172c:	c8 01       	movw	r24, r16
    172e:	6a e0       	ldi	r22, 0x0A	; 10
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	0e 94 13 11 	call	0x2226	; 0x2226 <__divmodhi4>
    1736:	80 5d       	subi	r24, 0xD0	; 208
    1738:	80 83       	st	Z, r24
			num = num/10;
    173a:	c8 01       	movw	r24, r16
    173c:	6a e0       	ldi	r22, 0x0A	; 10
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	0e 94 13 11 	call	0x2226	; 0x2226 <__divmodhi4>
    1744:	8b 01       	movw	r16, r22
			i++;
		}
		u8 str[i+1];


		for(s8 j = i-1; j >=0; j--){
    1746:	41 50       	subi	r20, 0x01	; 1
    1748:	31 97       	sbiw	r30, 0x01	; 1
    174a:	47 ff       	sbrs	r20, 7
    174c:	ef cf       	rjmp	.-34     	; 0x172c <vConvertNumbersToString+0x9e>
			Digit = (num % 10) + '0';//"ASCII Number"
			str[j]= Digit;
			num = num/10;
		}
		str[i]='\0';
    174e:	ec 0c       	add	r14, r12
    1750:	fd 1c       	adc	r15, r13
    1752:	f7 01       	movw	r30, r14
    1754:	10 82       	st	Z, r1
		vLcdWriteString(str);
    1756:	c6 01       	movw	r24, r12
    1758:	0e 94 34 0b 	call	0x1668	; 0x1668 <vLcdWriteString>
    175c:	8a 2d       	mov	r24, r10
    175e:	99 2d       	mov	r25, r9
    1760:	9c 01       	movw	r18, r24
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	3e bf       	out	0x3e, r19	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	2d bf       	out	0x3d, r18	; 61
	} if(num < 0){
    176c:	17 ff       	sbrs	r17, 7
    176e:	50 c0       	rjmp	.+160    	; 0x1810 <vConvertNumbersToString+0x182>
    1770:	bd b6       	in	r11, 0x3d	; 61
    1772:	ae b6       	in	r10, 0x3e	; 62
		LcdWriteData('-');
    1774:	8d e2       	ldi	r24, 0x2D	; 45
    1776:	0e 94 c6 0a 	call	0x158c	; 0x158c <LcdWriteData>
		num *=-1;
    177a:	cc 24       	eor	r12, r12
    177c:	dd 24       	eor	r13, r13
    177e:	c0 1a       	sub	r12, r16
    1780:	d1 0a       	sbc	r13, r17
    1782:	c6 01       	movw	r24, r12
    1784:	40 e0       	ldi	r20, 0x00	; 0
		s8 Digit =0;
		s32 num1 = num;
		s8 i =0;
		while( num1 !=0){
			//		Digit = num1%10;
			num1 = num1/10;
    1786:	6a e0       	ldi	r22, 0x0A	; 10
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	0e 94 13 11 	call	0x2226	; 0x2226 <__divmodhi4>
    178e:	cb 01       	movw	r24, r22
			i++;
    1790:	4f 5f       	subi	r20, 0xFF	; 255
		LcdWriteData('-');
		num *=-1;
		s8 Digit =0;
		s32 num1 = num;
		s8 i =0;
		while( num1 !=0){
    1792:	61 15       	cp	r22, r1
    1794:	71 05       	cpc	r23, r1
    1796:	b9 f7       	brne	.-18     	; 0x1786 <vConvertNumbersToString+0xf8>
			//		Digit = num1%10;
			num1 = num1/10;
			i++;
		}
		s8 str[i+1];
    1798:	04 2f       	mov	r16, r20
    179a:	11 27       	eor	r17, r17
    179c:	07 fd       	sbrc	r16, 7
    179e:	10 95       	com	r17
    17a0:	c8 01       	movw	r24, r16
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	2d b7       	in	r18, 0x3d	; 61
    17a6:	3e b7       	in	r19, 0x3e	; 62
    17a8:	28 1b       	sub	r18, r24
    17aa:	39 0b       	sbc	r19, r25
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	3e bf       	out	0x3e, r19	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	2d bf       	out	0x3d, r18	; 61
    17b6:	ed b6       	in	r14, 0x3d	; 61
    17b8:	fe b6       	in	r15, 0x3e	; 62
    17ba:	08 94       	sec
    17bc:	e1 1c       	adc	r14, r1
    17be:	f1 1c       	adc	r15, r1


		for(s8 j = i-1; j >=0; j--){
    17c0:	41 50       	subi	r20, 0x01	; 1
    17c2:	e4 2f       	mov	r30, r20
    17c4:	ff 27       	eor	r31, r31
    17c6:	e7 fd       	sbrc	r30, 7
    17c8:	f0 95       	com	r31
    17ca:	ee 0d       	add	r30, r14
    17cc:	ff 1d       	adc	r31, r15
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <vConvertNumbersToString+0x160>
			Digit = (num % 10) + '0';//"ASCII Number"
			str[j]= Digit;
    17d0:	c6 01       	movw	r24, r12
    17d2:	6a e0       	ldi	r22, 0x0A	; 10
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	0e 94 13 11 	call	0x2226	; 0x2226 <__divmodhi4>
    17da:	80 5d       	subi	r24, 0xD0	; 208
    17dc:	80 83       	st	Z, r24
			num = num/10;
    17de:	c6 01       	movw	r24, r12
    17e0:	6a e0       	ldi	r22, 0x0A	; 10
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	0e 94 13 11 	call	0x2226	; 0x2226 <__divmodhi4>
    17e8:	6b 01       	movw	r12, r22
			i++;
		}
		s8 str[i+1];


		for(s8 j = i-1; j >=0; j--){
    17ea:	41 50       	subi	r20, 0x01	; 1
    17ec:	31 97       	sbiw	r30, 0x01	; 1
    17ee:	47 ff       	sbrs	r20, 7
    17f0:	ef cf       	rjmp	.-34     	; 0x17d0 <vConvertNumbersToString+0x142>
			Digit = (num % 10) + '0';//"ASCII Number"
			str[j]= Digit;
			num = num/10;
		}
		str[i]='\0';
    17f2:	0e 0d       	add	r16, r14
    17f4:	1f 1d       	adc	r17, r15
    17f6:	f8 01       	movw	r30, r16
    17f8:	10 82       	st	Z, r1
		vLcdWriteString(str);
    17fa:	c7 01       	movw	r24, r14
    17fc:	0e 94 34 0b 	call	0x1668	; 0x1668 <vLcdWriteString>
    1800:	8b 2d       	mov	r24, r11
    1802:	9a 2d       	mov	r25, r10
    1804:	9c 01       	movw	r18, r24
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	3e bf       	out	0x3e, r19	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	2d bf       	out	0x3d, r18	; 61

	}

}
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	7e be       	out	0x3e, r7	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	6d be       	out	0x3d, r6	; 61
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	ff 90       	pop	r15
    1824:	ef 90       	pop	r14
    1826:	df 90       	pop	r13
    1828:	cf 90       	pop	r12
    182a:	bf 90       	pop	r11
    182c:	af 90       	pop	r10
    182e:	9f 90       	pop	r9
    1830:	7f 90       	pop	r7
    1832:	6f 90       	pop	r6
    1834:	08 95       	ret

00001836 <LcdWriteCommand>:
	_delay_ms(3);
	LcdWriteCommand(0b00000110);

}

void LcdWriteCommand(u8 command){
    1836:	ef 92       	push	r14
    1838:	ff 92       	push	r15
    183a:	1f 93       	push	r17
    183c:	18 2f       	mov	r17, r24
	vPinValue(PORT_RS,PIN_RS,LOW);
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(PORT_RW,PIN_RW,LOW);
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	62 e0       	ldi	r22, 0x02	; 2
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>

	vPinValue(PORT_D7,PIN_D7,READ_BIT(command,7));
    1852:	41 2f       	mov	r20, r17
    1854:	44 1f       	adc	r20, r20
    1856:	44 27       	eor	r20, r20
    1858:	44 1f       	adc	r20, r20
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	67 e0       	ldi	r22, 0x07	; 7
    185e:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(PORT_D6,PIN_D6,READ_BIT(command,6));
    1862:	41 2f       	mov	r20, r17
    1864:	42 95       	swap	r20
    1866:	46 95       	lsr	r20
    1868:	46 95       	lsr	r20
    186a:	41 70       	andi	r20, 0x01	; 1
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	66 e0       	ldi	r22, 0x06	; 6
    1870:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(PORT_D5,PIN_D5,READ_BIT(command,5));
    1874:	41 2f       	mov	r20, r17
    1876:	42 95       	swap	r20
    1878:	46 95       	lsr	r20
    187a:	41 70       	andi	r20, 0x01	; 1
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	65 e0       	ldi	r22, 0x05	; 5
    1880:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(PORT_D4,PIN_D4,READ_BIT(command,4));
    1884:	41 2f       	mov	r20, r17
    1886:	42 95       	swap	r20
    1888:	41 70       	andi	r20, 0x01	; 1
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	64 e0       	ldi	r22, 0x04	; 4
    188e:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>

	vPinValue(PORT_E,PIN_E,HIGH);
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	63 e0       	ldi	r22, 0x03	; 3
    1896:	41 e0       	ldi	r20, 0x01	; 1
    1898:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
    189c:	90 ed       	ldi	r25, 0xD0	; 208
    189e:	e9 2e       	mov	r14, r25
    18a0:	97 e0       	ldi	r25, 0x07	; 7
    18a2:	f9 2e       	mov	r15, r25
    18a4:	c7 01       	movw	r24, r14
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <LcdWriteCommand+0x70>
	_delay_us(500);
	vPinValue(PORT_E,PIN_E,LOW);
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	63 e0       	ldi	r22, 0x03	; 3
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>

	vPinValue(PORT_D7,PIN_D7,READ_BIT(command,3));
    18b4:	41 2f       	mov	r20, r17
    18b6:	46 95       	lsr	r20
    18b8:	46 95       	lsr	r20
    18ba:	46 95       	lsr	r20
    18bc:	41 70       	andi	r20, 0x01	; 1
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	67 e0       	ldi	r22, 0x07	; 7
    18c2:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(PORT_D6,PIN_D6,READ_BIT(command,2));
    18c6:	41 2f       	mov	r20, r17
    18c8:	46 95       	lsr	r20
    18ca:	46 95       	lsr	r20
    18cc:	41 70       	andi	r20, 0x01	; 1
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	66 e0       	ldi	r22, 0x06	; 6
    18d2:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(PORT_D5,PIN_D5,READ_BIT(command,1));
    18d6:	41 2f       	mov	r20, r17
    18d8:	46 95       	lsr	r20
    18da:	41 70       	andi	r20, 0x01	; 1
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	65 e0       	ldi	r22, 0x05	; 5
    18e0:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(PORT_D4,PIN_D4,READ_BIT(command,0));
    18e4:	11 70       	andi	r17, 0x01	; 1
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	64 e0       	ldi	r22, 0x04	; 4
    18ea:	41 2f       	mov	r20, r17
    18ec:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>

	vPinValue(PORT_E,PIN_E,HIGH);
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	63 e0       	ldi	r22, 0x03	; 3
    18f4:	41 e0       	ldi	r20, 0x01	; 1
    18f6:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
    18fa:	c7 01       	movw	r24, r14
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <LcdWriteCommand+0xc6>
	_delay_us(500);
	vPinValue(PORT_E,PIN_E,LOW);
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	63 e0       	ldi	r22, 0x03	; 3
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>

}
    190a:	1f 91       	pop	r17
    190c:	ff 90       	pop	r15
    190e:	ef 90       	pop	r14
    1910:	08 95       	ret

00001912 <vSetCursor>:
void vClearDisplay(void){
	LcdWriteCommand(0b00000001);
	_delay_ms(1);
}

void vSetCursor(u8 Row, u8 Colum){
    1912:	98 2f       	mov	r25, r24
	if(Row <= 2 && Row >=1&& Colum <= 40 && Colum >=1){
    1914:	81 50       	subi	r24, 0x01	; 1
    1916:	82 30       	cpi	r24, 0x02	; 2
    1918:	88 f4       	brcc	.+34     	; 0x193c <vSetCursor+0x2a>
    191a:	69 32       	cpi	r22, 0x29	; 41
    191c:	78 f4       	brcc	.+30     	; 0x193c <vSetCursor+0x2a>
    191e:	66 23       	and	r22, r22
    1920:	69 f0       	breq	.+26     	; 0x193c <vSetCursor+0x2a>
		if(Row == 1){
    1922:	91 30       	cpi	r25, 0x01	; 1
    1924:	29 f4       	brne	.+10     	; 0x1930 <vSetCursor+0x1e>
			LcdWriteCommand(ROW_1+Colum);
    1926:	86 2f       	mov	r24, r22
    1928:	80 58       	subi	r24, 0x80	; 128
    192a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LcdWriteCommand>
    192e:	08 95       	ret
		}else if (Row == 2){
    1930:	92 30       	cpi	r25, 0x02	; 2
    1932:	21 f4       	brne	.+8      	; 0x193c <vSetCursor+0x2a>
			LcdWriteCommand(ROW_2+Colum);
    1934:	86 2f       	mov	r24, r22
    1936:	80 54       	subi	r24, 0x40	; 64
    1938:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LcdWriteCommand>
    193c:	08 95       	ret

0000193e <vClearDisplay>:
	//	for(u8 i =0; i <= str[i]; i++){
	//		LcdWriteData(str[i]);
	//	}
}
void vClearDisplay(void){
	LcdWriteCommand(0b00000001);
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LcdWriteCommand>
    1944:	80 ea       	ldi	r24, 0xA0	; 160
    1946:	9f e0       	ldi	r25, 0x0F	; 15
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <vClearDisplay+0xa>
	_delay_ms(1);
}
    194c:	08 95       	ret

0000194e <LcdInit>:
#include"LCD_Interface.h"
#include "../../Config/LCD_config.h"
#include <util/delay.h>

#if LDC_MODE == MODE_4
void LcdInit(void){
    194e:	1f 93       	push	r17
	vSetPinDirection(PORT_D7,PIN_D7,output);
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	67 e0       	ldi	r22, 0x07	; 7
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vSetPinDirection(PORT_D6,PIN_D6,output);
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	66 e0       	ldi	r22, 0x06	; 6
    195e:	41 e0       	ldi	r20, 0x01	; 1
    1960:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vSetPinDirection(PORT_D5,PIN_D5,output);
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	65 e0       	ldi	r22, 0x05	; 5
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vSetPinDirection(PORT_D4,PIN_D4,output);
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	64 e0       	ldi	r22, 0x04	; 4
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vSetPinDirection(PORT_RS,PIN_RS,output);
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	61 e0       	ldi	r22, 0x01	; 1
    197c:	41 e0       	ldi	r20, 0x01	; 1
    197e:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vSetPinDirection(PORT_RW,PIN_RW,output);
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	62 e0       	ldi	r22, 0x02	; 2
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vSetPinDirection(PORT_E,PIN_E,output);
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	63 e0       	ldi	r22, 0x03	; 3
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
    1996:	8e e5       	ldi	r24, 0x5E	; 94
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	20 e9       	ldi	r18, 0x90	; 144
    199c:	31 e0       	ldi	r19, 0x01	; 1
    199e:	f9 01       	movw	r30, r18
    19a0:	31 97       	sbiw	r30, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LcdInit+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a6:	d9 f7       	brne	.-10     	; 0x199e <LcdInit+0x50>
	_delay_ms(35);
	LcdWriteCommand(0b00000010);
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LcdWriteCommand>
	LcdWriteCommand(0b00101000);
    19ae:	88 e2       	ldi	r24, 0x28	; 40
    19b0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LcdWriteCommand>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19b4:	10 ef       	ldi	r17, 0xF0	; 240
    19b6:	81 2f       	mov	r24, r17
    19b8:	8a 95       	dec	r24
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <LcdInit+0x6a>
	_delay_us(45);
	LcdWriteCommand(0b00001111);
    19bc:	8f e0       	ldi	r24, 0x0F	; 15
    19be:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LcdWriteCommand>
    19c2:	1a 95       	dec	r17
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <LcdInit+0x74>
	_delay_us(45);
	LcdWriteCommand(0b00000001);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LcdWriteCommand>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19cc:	80 ee       	ldi	r24, 0xE0	; 224
    19ce:	9e e2       	ldi	r25, 0x2E	; 46
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <LcdInit+0x82>
	_delay_ms(3);
	LcdWriteCommand(0b00000110);
    19d4:	86 e0       	ldi	r24, 0x06	; 6
    19d6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LcdWriteCommand>

}
    19da:	1f 91       	pop	r17
    19dc:	08 95       	ret

000019de <u8KeyPressed>:
	vPinValue(COL4_PORT,COL4_PIN,HIGH);



}
u8 u8KeyPressed(){
    19de:	6f 92       	push	r6
    19e0:	7f 92       	push	r7
    19e2:	9f 92       	push	r9
    19e4:	af 92       	push	r10
    19e6:	bf 92       	push	r11
    19e8:	cf 92       	push	r12
    19ea:	df 92       	push	r13
    19ec:	ef 92       	push	r14
    19ee:	ff 92       	push	r15
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	4b e0       	ldi	r20, 0x0B	; 11
    19fa:	a4 2e       	mov	r10, r20
    19fc:	42 e0       	ldi	r20, 0x02	; 2
    19fe:	b4 2e       	mov	r11, r20
    1a00:	3f e0       	ldi	r19, 0x0F	; 15
    1a02:	c3 2e       	mov	r12, r19
    1a04:	32 e0       	ldi	r19, 0x02	; 2
    1a06:	d3 2e       	mov	r13, r19
    1a08:	10 e0       	ldi	r17, 0x00	; 0
    1a0a:	24 e5       	ldi	r18, 0x54	; 84
    1a0c:	92 2e       	mov	r9, r18
    1a0e:	ee 24       	eor	r14, r14
    1a10:	ff 24       	eor	r15, r15
    1a12:	90 e9       	ldi	r25, 0x90	; 144
    1a14:	69 2e       	mov	r6, r25
    1a16:	91 e0       	ldi	r25, 0x01	; 1
    1a18:	79 2e       	mov	r7, r25
	u8 flag = 0;
	u8 ReturnValue = NoKey;  // Assuming NoKey is a defined constant representing no key press

	for (u8 i = 0; i < 4; i++) {
		vPinValue(ArrColPort[i], ArrColPins[i], LOW);
    1a1a:	f5 01       	movw	r30, r10
    1a1c:	80 81       	ld	r24, Z
    1a1e:	f6 01       	movw	r30, r12
    1a20:	60 81       	ld	r22, Z
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
		for (u8 j = 0; j < 4; j++) {
			if (u8ReadPin(ArrRowPort[j], ArrRowPins[j]) == 0) {
    1a28:	80 91 13 02 	lds	r24, 0x0213
    1a2c:	60 91 17 02 	lds	r22, 0x0217
    1a30:	0e 94 26 09 	call	0x124c	; 0x124c <u8ReadPin>
    1a34:	88 23       	and	r24, r24
    1a36:	19 f4       	brne	.+6      	; 0x1a3e <u8KeyPressed+0x60>
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	20 c0       	rjmp	.+64     	; 0x1a7e <u8KeyPressed+0xa0>
    1a3e:	80 91 14 02 	lds	r24, 0x0214
    1a42:	60 91 18 02 	lds	r22, 0x0218
    1a46:	0e 94 26 09 	call	0x124c	; 0x124c <u8ReadPin>
    1a4a:	88 23       	and	r24, r24
    1a4c:	19 f4       	brne	.+6      	; 0x1a54 <u8KeyPressed+0x76>
    1a4e:	61 e0       	ldi	r22, 0x01	; 1
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	15 c0       	rjmp	.+42     	; 0x1a7e <u8KeyPressed+0xa0>
    1a54:	80 91 15 02 	lds	r24, 0x0215
    1a58:	60 91 19 02 	lds	r22, 0x0219
    1a5c:	0e 94 26 09 	call	0x124c	; 0x124c <u8ReadPin>
    1a60:	88 23       	and	r24, r24
    1a62:	19 f4       	brne	.+6      	; 0x1a6a <u8KeyPressed+0x8c>
    1a64:	62 e0       	ldi	r22, 0x02	; 2
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	0a c0       	rjmp	.+20     	; 0x1a7e <u8KeyPressed+0xa0>
    1a6a:	80 91 16 02 	lds	r24, 0x0216
    1a6e:	60 91 1a 02 	lds	r22, 0x021A
    1a72:	0e 94 26 09 	call	0x124c	; 0x124c <u8ReadPin>
    1a76:	88 23       	and	r24, r24
    1a78:	09 f5       	brne	.+66     	; 0x1abc <u8KeyPressed+0xde>
    1a7a:	63 e0       	ldi	r22, 0x03	; 3
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
				ReturnValue = KeyPadArray[i][j];
    1a7e:	f7 01       	movw	r30, r14
    1a80:	ee 0f       	add	r30, r30
    1a82:	ff 1f       	adc	r31, r31
    1a84:	ee 0f       	add	r30, r30
    1a86:	ff 1f       	adc	r31, r31
    1a88:	e6 0f       	add	r30, r22
    1a8a:	f7 1f       	adc	r31, r23
    1a8c:	e5 50       	subi	r30, 0x05	; 5
    1a8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a90:	90 80       	ld	r9, Z
				flag = 1;


				while(u8ReadPin(ArrRowPort[j], ArrRowPins[j]) == 0);
    1a92:	8b 01       	movw	r16, r22
    1a94:	0d 5e       	subi	r16, 0xED	; 237
    1a96:	1d 4f       	sbci	r17, 0xFD	; 253
    1a98:	eb 01       	movw	r28, r22
    1a9a:	c9 5e       	subi	r28, 0xE9	; 233
    1a9c:	dd 4f       	sbci	r29, 0xFD	; 253
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	80 81       	ld	r24, Z
    1aa2:	68 81       	ld	r22, Y
    1aa4:	0e 94 26 09 	call	0x124c	; 0x124c <u8ReadPin>
    1aa8:	88 23       	and	r24, r24
    1aaa:	c9 f3       	breq	.-14     	; 0x1a9e <u8KeyPressed+0xc0>
    1aac:	84 ef       	ldi	r24, 0xF4	; 244
    1aae:	91 e0       	ldi	r25, 0x01	; 1
    1ab0:	f3 01       	movw	r30, r6
    1ab2:	31 97       	sbiw	r30, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <u8KeyPressed+0xd4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab8:	d9 f7       	brne	.-10     	; 0x1ab0 <u8KeyPressed+0xd2>
    1aba:	11 e0       	ldi	r17, 0x01	; 1
				_delay_ms(50);
				break;
			}
		}
		vPinValue(ArrColPort[i], ArrColPins[i], HIGH);
    1abc:	f5 01       	movw	r30, r10
    1abe:	80 81       	ld	r24, Z
    1ac0:	f6 01       	movw	r30, r12
    1ac2:	60 81       	ld	r22, Z
    1ac4:	41 e0       	ldi	r20, 0x01	; 1
    1ac6:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
		if (flag == 1) {
    1aca:	11 30       	cpi	r17, 0x01	; 1
    1acc:	71 f0       	breq	.+28     	; 0x1aea <u8KeyPressed+0x10c>
			break;
    1ace:	08 94       	sec
    1ad0:	e1 1c       	adc	r14, r1
    1ad2:	f1 1c       	adc	r15, r1
    1ad4:	08 94       	sec
    1ad6:	a1 1c       	adc	r10, r1
    1ad8:	b1 1c       	adc	r11, r1
    1ada:	08 94       	sec
    1adc:	c1 1c       	adc	r12, r1
    1ade:	d1 1c       	adc	r13, r1
}
u8 u8KeyPressed(){
	u8 flag = 0;
	u8 ReturnValue = NoKey;  // Assuming NoKey is a defined constant representing no key press

	for (u8 i = 0; i < 4; i++) {
    1ae0:	f4 e0       	ldi	r31, 0x04	; 4
    1ae2:	ef 16       	cp	r14, r31
    1ae4:	f1 04       	cpc	r15, r1
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <u8KeyPressed+0x10c>
    1ae8:	98 cf       	rjmp	.-208    	; 0x1a1a <u8KeyPressed+0x3c>
			break;
		}
	}

	return ReturnValue;
}
    1aea:	89 2d       	mov	r24, r9
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	cf 90       	pop	r12
    1afc:	bf 90       	pop	r11
    1afe:	af 90       	pop	r10
    1b00:	9f 90       	pop	r9
    1b02:	7f 90       	pop	r7
    1b04:	6f 90       	pop	r6
    1b06:	08 95       	ret

00001b08 <vKeyPadInit>:
u8 ArrRowPort[4] = { ROW1_PORT, ROW2_PORT, ROW3_PORT, ROW4_PORT };
u8 ArrRowPins[4] = { ROW1_PIN, ROW2_PIN, ROW3_PIN, ROW4_PIN };

void vKeyPadInit(void){

	vSetPinDirection(ROW1_PORT,ROW1_PIN,input);
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	64 e0       	ldi	r22, 0x04	; 4
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vSetPinDirection(ROW2_PORT,ROW2_PIN,input);
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	65 e0       	ldi	r22, 0x05	; 5
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vSetPinDirection(ROW3_PORT,ROW3_PIN,input);
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	66 e0       	ldi	r22, 0x06	; 6
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vSetPinDirection(ROW4_PORT,ROW4_PIN,input);
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	67 e0       	ldi	r22, 0x07	; 7
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>

	vSetPinDirection(COL1_PORT,COL1_PIN,output);
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	62 e0       	ldi	r22, 0x02	; 2
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vSetPinDirection(COL2_PORT,COL2_PIN,output);
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	63 e0       	ldi	r22, 0x03	; 3
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vSetPinDirection(COL3_PORT,COL3_PIN,output);
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	64 e0       	ldi	r22, 0x04	; 4
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vSetPinDirection(COL4_PORT,COL4_PIN,output);
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
    1b50:	65 e0       	ldi	r22, 0x05	; 5
    1b52:	41 e0       	ldi	r20, 0x01	; 1
    1b54:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>

	vPinValue(ROW1_PORT,ROW1_PIN,HIGH);
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	64 e0       	ldi	r22, 0x04	; 4
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(ROW2_PORT,ROW2_PIN,HIGH);
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	65 e0       	ldi	r22, 0x05	; 5
    1b66:	41 e0       	ldi	r20, 0x01	; 1
    1b68:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(ROW3_PORT,ROW3_PIN,HIGH);
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	66 e0       	ldi	r22, 0x06	; 6
    1b70:	41 e0       	ldi	r20, 0x01	; 1
    1b72:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(ROW4_PORT,ROW4_PIN,HIGH);
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	67 e0       	ldi	r22, 0x07	; 7
    1b7a:	41 e0       	ldi	r20, 0x01	; 1
    1b7c:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>

	vPinValue(COL1_PORT,COL1_PIN,HIGH);
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	62 e0       	ldi	r22, 0x02	; 2
    1b84:	41 e0       	ldi	r20, 0x01	; 1
    1b86:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(COL2_PORT,COL2_PIN,HIGH);
    1b8a:	82 e0       	ldi	r24, 0x02	; 2
    1b8c:	63 e0       	ldi	r22, 0x03	; 3
    1b8e:	41 e0       	ldi	r20, 0x01	; 1
    1b90:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(COL3_PORT,COL3_PIN,HIGH);
    1b94:	82 e0       	ldi	r24, 0x02	; 2
    1b96:	64 e0       	ldi	r22, 0x04	; 4
    1b98:	41 e0       	ldi	r20, 0x01	; 1
    1b9a:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vPinValue(COL4_PORT,COL4_PIN,HIGH);
    1b9e:	82 e0       	ldi	r24, 0x02	; 2
    1ba0:	65 e0       	ldi	r22, 0x05	; 5
    1ba2:	41 e0       	ldi	r20, 0x01	; 1
    1ba4:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>



}
    1ba8:	08 95       	ret

00001baa <EEPROM_ReadData>:
	//stop condition
	vI2C_StopCondition();
	_delay_ms(5);

}
void EEPROM_ReadData(u16 address , u8*data){
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	18 2f       	mov	r17, r24
    1bb4:	09 2f       	mov	r16, r25
    1bb6:	7b 01       	movw	r14, r22
	//start condition
	vI2C_StartCondition();
    1bb8:	0e 94 62 07 	call	0xec4	; 0xec4 <vI2C_StartCondition>
	//send address w write
	vI2C_SendAddressWithWrite(0b1010000 | address >> 8);
    1bbc:	00 65       	ori	r16, 0x50	; 80
    1bbe:	80 2f       	mov	r24, r16
    1bc0:	0e 94 7a 07 	call	0xef4	; 0xef4 <vI2C_SendAddressWithWrite>
	//send word address
	vI2CSendData((u8)address);
    1bc4:	81 2f       	mov	r24, r17
    1bc6:	0e 94 9b 07 	call	0xf36	; 0xf36 <vI2CSendData>
	//repeated start
	vI2C_ReStart();
    1bca:	0e 94 6e 07 	call	0xedc	; 0xedc <vI2C_ReStart>
	//send address w read
	vI2C_SendAddressWithRead(0b1010000 | address >> 8);
    1bce:	80 2f       	mov	r24, r16
    1bd0:	0e 94 8a 07 	call	0xf14	; 0xf14 <vI2C_SendAddressWithRead>
	//receive data
	* data = u8I2C_ReciveData(WITHOUT_ACK);
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <u8I2C_ReciveData>
    1bda:	f7 01       	movw	r30, r14
    1bdc:	80 83       	st	Z, r24
	//stop condition
	vI2C_StopCondition();
    1bde:	0e 94 bc 07 	call	0xf78	; 0xf78 <vI2C_StopCondition>
    1be2:	80 e2       	ldi	r24, 0x20	; 32
    1be4:	9e e4       	ldi	r25, 0x4E	; 78
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <EEPROM_ReadData+0x3c>
	_delay_ms(5);

}
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	08 95       	ret

00001bf4 <EEPROM_WriteData>:

void EEPROM_Init(){
	vI2C_Init();

}
void EEPROM_WriteData(u16 address,u8 data){
    1bf4:	ff 92       	push	r15
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	18 2f       	mov	r17, r24
    1bfc:	09 2f       	mov	r16, r25
    1bfe:	f6 2e       	mov	r15, r22
	//start condition
	vI2C_StartCondition();
    1c00:	0e 94 62 07 	call	0xec4	; 0xec4 <vI2C_StartCondition>
	//send address w write
	vI2C_SendAddressWithWrite(0b1010000 | address >> 8);
    1c04:	80 2f       	mov	r24, r16
    1c06:	80 65       	ori	r24, 0x50	; 80
    1c08:	0e 94 7a 07 	call	0xef4	; 0xef4 <vI2C_SendAddressWithWrite>
	//send word address
	vI2CSendData((u8)address);
    1c0c:	81 2f       	mov	r24, r17
    1c0e:	0e 94 9b 07 	call	0xf36	; 0xf36 <vI2CSendData>
	//send data
	vI2CSendData(data);
    1c12:	8f 2d       	mov	r24, r15
    1c14:	0e 94 9b 07 	call	0xf36	; 0xf36 <vI2CSendData>
	//stop condition
	vI2C_StopCondition();
    1c18:	0e 94 bc 07 	call	0xf78	; 0xf78 <vI2C_StopCondition>
    1c1c:	80 e2       	ldi	r24, 0x20	; 32
    1c1e:	9e e4       	ldi	r25, 0x4E	; 78
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <EEPROM_WriteData+0x2c>
	_delay_ms(5);

}
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	ff 90       	pop	r15
    1c2a:	08 95       	ret

00001c2c <EEPROM_Init>:
#include "../../MCAL/I2C/I2C_Interface.h"
#include "EEPROM_Interface.h"
#include <util/delay.h>

void EEPROM_Init(){
	vI2C_Init();
    1c2c:	0e 94 57 07 	call	0xeae	; 0xeae <vI2C_Init>

}
    1c30:	08 95       	ret

00001c32 <DCMotorOFF>:
	vSetPinDirection(RelayPort,RelayPin,output);
	vPinValue(RelayPort,RelayPin,HIGH);
}

void DCMotorOFF(){
	vSetPinDirection(RelayPort,RelayPin,output);
    1c32:	83 e0       	ldi	r24, 0x03	; 3
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	41 e0       	ldi	r20, 0x01	; 1
    1c38:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vPinValue(RelayPort,RelayPin,LOW);
    1c3c:	83 e0       	ldi	r24, 0x03	; 3
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
}
    1c46:	08 95       	ret

00001c48 <DCMotorON>:
#include"../../MCAL/DIO/DIO_Interface.h"
#include "DC_MOTOR_Interface.h"
#include "../../Config/DC_MOTOR_config.h"

void DCMotorON(){
	vSetPinDirection(RelayPort,RelayPin,output);
    1c48:	83 e0       	ldi	r24, 0x03	; 3
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	41 e0       	ldi	r20, 0x01	; 1
    1c4e:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vPinValue(RelayPort,RelayPin,HIGH);
    1c52:	83 e0       	ldi	r24, 0x03	; 3
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
}
    1c5c:	08 95       	ret

00001c5e <vcheckpass>:
	EEPROM_ReadData(address+1,&data2);
	u16 combined_pass = ((u16)data2 << 8) | data1;
	thepass= combined_pass;
	return combined_pass;
}
bool vcheckpass() {
    1c5e:	ef 92       	push	r14
    1c60:	ff 92       	push	r15
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	00 e0       	ldi	r16, 0x00	; 0
    1c6c:	40 e9       	ldi	r20, 0x90	; 144
    1c6e:	e4 2e       	mov	r14, r20
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	f4 2e       	mov	r15, r20
	u8 Key = NoKey;
	u16 pass = 0;
	u8 attempts = 0;

	while (attempts < MAX_ATTEMPTS) {
		vClearDisplay();
    1c74:	0e 94 9f 0c 	call	0x193e	; 0x193e <vClearDisplay>
		vLcdWriteString("Enter password:");
    1c78:	80 e6       	ldi	r24, 0x60	; 96
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	0e 94 34 0b 	call	0x1668	; 0x1668 <vLcdWriteString>
		vSetCursor(2, 1);
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	61 e0       	ldi	r22, 0x01	; 1
    1c84:	0e 94 89 0c 	call	0x1912	; 0x1912 <vSetCursor>
    1c88:	c0 e0       	ldi	r28, 0x00	; 0
    1c8a:	d0 e0       	ldi	r29, 0x00	; 0

		pass = 0;
		while (1) {
			Key = u8KeyPressed();
    1c8c:	0e 94 ef 0c 	call	0x19de	; 0x19de <u8KeyPressed>
    1c90:	18 2f       	mov	r17, r24
			if (Key != NoKey) {
    1c92:	84 35       	cpi	r24, 0x54	; 84
    1c94:	d9 f3       	breq	.-10     	; 0x1c8c <vcheckpass+0x2e>
				LcdWriteData('*');
    1c96:	8a e2       	ldi	r24, 0x2A	; 42
    1c98:	0e 94 c6 0a 	call	0x158c	; 0x158c <LcdWriteData>
				if (Key >= '0' && Key <= '9') {
    1c9c:	81 2f       	mov	r24, r17
    1c9e:	80 53       	subi	r24, 0x30	; 48
    1ca0:	8a 30       	cpi	r24, 0x0A	; 10
    1ca2:	68 f4       	brcc	.+26     	; 0x1cbe <vcheckpass+0x60>
					pass = (pass * 10) + (Key - '0');
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	33 e0       	ldi	r19, 0x03	; 3
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	3a 95       	dec	r19
    1cae:	e1 f7       	brne	.-8      	; 0x1ca8 <vcheckpass+0x4a>
    1cb0:	cc 0f       	add	r28, r28
    1cb2:	dd 1f       	adc	r29, r29
    1cb4:	c8 0f       	add	r28, r24
    1cb6:	d9 1f       	adc	r29, r25
    1cb8:	e0 97       	sbiw	r28, 0x30	; 48
    1cba:	c1 0f       	add	r28, r17
    1cbc:	d1 1d       	adc	r29, r1
				}
				if (Key == '=') {
    1cbe:	1d 33       	cpi	r17, 0x3D	; 61
    1cc0:	f1 f4       	brne	.+60     	; 0x1cfe <vcheckpass+0xa0>
					if (pass == thepass) {
    1cc2:	80 91 25 02 	lds	r24, 0x0225
    1cc6:	90 91 26 02 	lds	r25, 0x0226
    1cca:	c8 17       	cp	r28, r24
    1ccc:	d9 07       	cpc	r29, r25
    1cce:	41 f4       	brne	.+16     	; 0x1ce0 <vcheckpass+0x82>
						vClearDisplay();
    1cd0:	0e 94 9f 0c 	call	0x193e	; 0x193e <vClearDisplay>
						vLcdWriteString("Access Granted");
    1cd4:	80 e7       	ldi	r24, 0x70	; 112
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 34 0b 	call	0x1668	; 0x1668 <vLcdWriteString>
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	3e c0       	rjmp	.+124    	; 0x1d5c <vcheckpass+0xfe>
						return True;
					} else {
						attempts++;
    1ce0:	0f 5f       	subi	r16, 0xFF	; 255
						vClearDisplay();
    1ce2:	0e 94 9f 0c 	call	0x193e	; 0x193e <vClearDisplay>
						vLcdWriteString("Wrong password");
    1ce6:	8f e7       	ldi	r24, 0x7F	; 127
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 34 0b 	call	0x1668	; 0x1668 <vLcdWriteString>
    1cee:	80 e1       	ldi	r24, 0x10	; 16
    1cf0:	97 e2       	ldi	r25, 0x27	; 39
    1cf2:	f7 01       	movw	r30, r14
    1cf4:	31 97       	sbiw	r30, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <vcheckpass+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfa:	d9 f7       	brne	.-10     	; 0x1cf2 <vcheckpass+0x94>
    1cfc:	10 c0       	rjmp	.+32     	; 0x1d1e <vcheckpass+0xc0>
						_delay_ms(1000);
						break;
					}
				}
				if (Key == 'c') {
    1cfe:	13 36       	cpi	r17, 0x63	; 99
    1d00:	29 f6       	brne	.-118    	; 0x1c8c <vcheckpass+0x2e>
					vClearDisplay();
    1d02:	0e 94 9f 0c 	call	0x193e	; 0x193e <vClearDisplay>
					vLcdWriteString("Password cleared");
    1d06:	8e e8       	ldi	r24, 0x8E	; 142
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	0e 94 34 0b 	call	0x1668	; 0x1668 <vLcdWriteString>
    1d0e:	80 e1       	ldi	r24, 0x10	; 16
    1d10:	97 e2       	ldi	r25, 0x27	; 39
    1d12:	f7 01       	movw	r30, r14
    1d14:	31 97       	sbiw	r30, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <vcheckpass+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d18:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1a:	d9 f7       	brne	.-10     	; 0x1d12 <vcheckpass+0xb4>
    1d1c:	ab cf       	rjmp	.-170    	; 0x1c74 <vcheckpass+0x16>
bool vcheckpass() {
	u8 Key = NoKey;
	u16 pass = 0;
	u8 attempts = 0;

	while (attempts < MAX_ATTEMPTS) {
    1d1e:	03 30       	cpi	r16, 0x03	; 3
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <vcheckpass+0xc6>
    1d22:	a8 cf       	rjmp	.-176    	; 0x1c74 <vcheckpass+0x16>
				}
			}
		}
	}

	vClearDisplay();
    1d24:	0e 94 9f 0c 	call	0x193e	; 0x193e <vClearDisplay>
	vSetCursor(1, 1);
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	61 e0       	ldi	r22, 0x01	; 1
    1d2c:	0e 94 89 0c 	call	0x1912	; 0x1912 <vSetCursor>
	vLcdWriteString("System locked!");
    1d30:	8f e9       	ldi	r24, 0x9F	; 159
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	0e 94 34 0b 	call	0x1668	; 0x1668 <vLcdWriteString>
	vSetCursor(2, 1);
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	61 e0       	ldi	r22, 0x01	; 1
    1d3c:	0e 94 89 0c 	call	0x1912	; 0x1912 <vSetCursor>
	vLcdWriteString("Require Restart");
    1d40:	8e ea       	ldi	r24, 0xAE	; 174
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	0e 94 34 0b 	call	0x1668	; 0x1668 <vLcdWriteString>
    1d48:	80 e1       	ldi	r24, 0x10	; 16
    1d4a:	97 e2       	ldi	r25, 0x27	; 39
    1d4c:	20 e9       	ldi	r18, 0x90	; 144
    1d4e:	31 e0       	ldi	r19, 0x01	; 1
    1d50:	f9 01       	movw	r30, r18
    1d52:	31 97       	sbiw	r30, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <vcheckpass+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d56:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d58:	d9 f7       	brne	.-10     	; 0x1d50 <vcheckpass+0xf2>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(1000);
	return False;
}
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	ef 90       	pop	r14
    1d68:	08 95       	ret

00001d6a <u16password>:
	vSetPinDirection(PORT_D , PIN_7 , output);
	vPinValue(PORT_D , PIN_7 , HIGH);
	vSetPinDirection(PORT_D , PIN_1 , output);
	vPinValue(PORT_D , PIN_1 , HIGH);
}
u16 u16password(u16 address, u16 pass){
    1d6a:	df 92       	push	r13
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <u16password+0x10>
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	8c 01       	movw	r16, r24
    1d80:	d7 2e       	mov	r13, r23
	u8 data1 = 0;
    1d82:	19 82       	std	Y+1, r1	; 0x01
	u8 data2 = 0;
    1d84:	1a 82       	std	Y+2, r1	; 0x02
	EEPROM_WriteData(address,(u8)pass);
    1d86:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <EEPROM_WriteData>
	EEPROM_WriteData(address+1,(u8)(pass >> 8));
    1d8a:	78 01       	movw	r14, r16
    1d8c:	08 94       	sec
    1d8e:	e1 1c       	adc	r14, r1
    1d90:	f1 1c       	adc	r15, r1
    1d92:	c7 01       	movw	r24, r14
    1d94:	6d 2d       	mov	r22, r13
    1d96:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <EEPROM_WriteData>

	EEPROM_ReadData(address,&data1);
    1d9a:	c8 01       	movw	r24, r16
    1d9c:	be 01       	movw	r22, r28
    1d9e:	6f 5f       	subi	r22, 0xFF	; 255
    1da0:	7f 4f       	sbci	r23, 0xFF	; 255
    1da2:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <EEPROM_ReadData>
	EEPROM_ReadData(address+1,&data2);
    1da6:	c7 01       	movw	r24, r14
    1da8:	be 01       	movw	r22, r28
    1daa:	6e 5f       	subi	r22, 0xFE	; 254
    1dac:	7f 4f       	sbci	r23, 0xFF	; 255
    1dae:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <EEPROM_ReadData>
	u16 combined_pass = ((u16)data2 << 8) | data1;
    1db2:	9a 81       	ldd	r25, Y+2	; 0x02
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	29 81       	ldd	r18, Y+1	; 0x01
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	28 2b       	or	r18, r24
    1dbc:	39 2b       	or	r19, r25
	thepass= combined_pass;
    1dbe:	30 93 26 02 	sts	0x0226, r19
    1dc2:	20 93 25 02 	sts	0x0225, r18
	return combined_pass;
}
    1dc6:	c9 01       	movw	r24, r18
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	ff 90       	pop	r15
    1dd6:	ef 90       	pop	r14
    1dd8:	df 90       	pop	r13
    1dda:	08 95       	ret

00001ddc <vSetLedDirections>:
	}else{
		DCMotorOFF();
	}
}
void vSetLedDirections(){
	vSetPinDirection(PORT_D , PIN_3 , output);
    1ddc:	83 e0       	ldi	r24, 0x03	; 3
    1dde:	63 e0       	ldi	r22, 0x03	; 3
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vPinValue(PORT_D , PIN_3 , HIGH);
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	63 e0       	ldi	r22, 0x03	; 3
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vSetPinDirection(PORT_D , PIN_4 , output);
    1df0:	83 e0       	ldi	r24, 0x03	; 3
    1df2:	64 e0       	ldi	r22, 0x04	; 4
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vPinValue(PORT_D , PIN_4 , HIGH);
    1dfa:	83 e0       	ldi	r24, 0x03	; 3
    1dfc:	64 e0       	ldi	r22, 0x04	; 4
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vSetPinDirection(PORT_B , PIN_0 , output);
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	41 e0       	ldi	r20, 0x01	; 1
    1e0a:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vPinValue(PORT_B , PIN_0 , HIGH);
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	60 e0       	ldi	r22, 0x00	; 0
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vSetPinDirection(PORT_D , PIN_6 , output);
    1e18:	83 e0       	ldi	r24, 0x03	; 3
    1e1a:	66 e0       	ldi	r22, 0x06	; 6
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vPinValue(PORT_D , PIN_6 , HIGH);
    1e22:	83 e0       	ldi	r24, 0x03	; 3
    1e24:	66 e0       	ldi	r22, 0x06	; 6
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vSetPinDirection(PORT_D , PIN_7 , output);
    1e2c:	83 e0       	ldi	r24, 0x03	; 3
    1e2e:	67 e0       	ldi	r22, 0x07	; 7
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vPinValue(PORT_D , PIN_7 , HIGH);
    1e36:	83 e0       	ldi	r24, 0x03	; 3
    1e38:	67 e0       	ldi	r22, 0x07	; 7
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
	vSetPinDirection(PORT_D , PIN_1 , output);
    1e40:	83 e0       	ldi	r24, 0x03	; 3
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vPinValue(PORT_D , PIN_1 , HIGH);
    1e4a:	83 e0       	ldi	r24, 0x03	; 3
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
}
    1e54:	08 95       	ret

00001e56 <vCheckTemp>:
	temp = u16ADCTempRead(Channel_A1);
	_delay_ms(500);
	return temp;
}
void vCheckTemp(){
	if(temp > 28 || temp >= 21 ){
    1e56:	80 91 24 02 	lds	r24, 0x0224
    1e5a:	8d 31       	cpi	r24, 0x1D	; 29
    1e5c:	20 f4       	brcc	.+8      	; 0x1e66 <vCheckTemp+0x10>
    1e5e:	80 91 24 02 	lds	r24, 0x0224
    1e62:	85 31       	cpi	r24, 0x15	; 21
    1e64:	18 f0       	brcs	.+6      	; 0x1e6c <vCheckTemp+0x16>
		DCMotorON();
    1e66:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <DCMotorON>
    1e6a:	08 95       	ret
	}else if(temp < 21){
    1e6c:	80 91 24 02 	lds	r24, 0x0224
		DCMotorOFF();
	}else{
		DCMotorOFF();
    1e70:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <DCMotorOFF>
    1e74:	08 95       	ret

00001e76 <u8CalculateTemperature>:

#define MAX_ATTEMPTS 3
volatile u8 temp = 0;
u16 thepass = 0;
u8 u8CalculateTemperature(){
	temp = u16ADCTempRead(Channel_A1);
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	0e 94 be 0a 	call	0x157c	; 0x157c <u16ADCTempRead>
    1e7c:	80 93 24 02 	sts	0x0224, r24
    1e80:	88 e8       	ldi	r24, 0x88	; 136
    1e82:	93 e1       	ldi	r25, 0x13	; 19
    1e84:	20 e9       	ldi	r18, 0x90	; 144
    1e86:	31 e0       	ldi	r19, 0x01	; 1
    1e88:	f9 01       	movw	r30, r18
    1e8a:	31 97       	sbiw	r30, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <u8CalculateTemperature+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e90:	d9 f7       	brne	.-10     	; 0x1e88 <u8CalculateTemperature+0x12>
	_delay_ms(500);
	return temp;
    1e92:	80 91 24 02 	lds	r24, 0x0224
}
    1e96:	08 95       	ret

00001e98 <evaluate.1302>:
		if (op == '-') return a - b;
		return 0;
	}

	// Function to evaluate the current stack
	void evaluate() {
    1e98:	2f 92       	push	r2
    1e9a:	3f 92       	push	r3
    1e9c:	cf 93       	push	r28
    1e9e:	df 93       	push	r29
    1ea0:	e1 01       	movw	r28, r2
		u16 b = numStack[--topNum];
    1ea2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ea4:	81 50       	subi	r24, 0x01	; 1
    1ea6:	e8 2f       	mov	r30, r24
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	ee 0f       	add	r30, r30
    1eac:	ff 1f       	adc	r31, r31
    1eae:	e2 0d       	add	r30, r2
    1eb0:	f3 1d       	adc	r31, r3
    1eb2:	63 85       	ldd	r22, Z+11	; 0x0b
    1eb4:	74 85       	ldd	r23, Z+12	; 0x0c
		u16 a = numStack[--topNum];
    1eb6:	48 2f       	mov	r20, r24
    1eb8:	41 50       	subi	r20, 0x01	; 1
    1eba:	4f 8f       	std	Y+31, r20	; 0x1f
    1ebc:	e4 2f       	mov	r30, r20
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	ee 0f       	add	r30, r30
    1ec2:	ff 1f       	adc	r31, r31
    1ec4:	e2 0d       	add	r30, r2
    1ec6:	f3 1d       	adc	r31, r3
    1ec8:	23 85       	ldd	r18, Z+11	; 0x0b
    1eca:	34 85       	ldd	r19, Z+12	; 0x0c
		u8 op = operatorStack[--topOp];
    1ecc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ece:	81 50       	subi	r24, 0x01	; 1
    1ed0:	8a 87       	std	Y+10, r24	; 0x0a
    1ed2:	f1 01       	movw	r30, r2
    1ed4:	e8 0f       	add	r30, r24
    1ed6:	f1 1d       	adc	r31, r1
    1ed8:	e0 81       	ld	r30, Z
		return 0;
	}

	// Function to apply an arithmetic operation
	u16 applyOperation(u16 a, u16 b, u8 op) {
		if (op == 'x') return a * b;
    1eda:	e8 37       	cpi	r30, 0x78	; 120
    1edc:	41 f4       	brne	.+16     	; 0x1eee <evaluate.1302+0x56>
    1ede:	26 9f       	mul	r18, r22
    1ee0:	c0 01       	movw	r24, r0
    1ee2:	27 9f       	mul	r18, r23
    1ee4:	90 0d       	add	r25, r0
    1ee6:	36 9f       	mul	r19, r22
    1ee8:	90 0d       	add	r25, r0
    1eea:	11 24       	eor	r1, r1
    1eec:	15 c0       	rjmp	.+42     	; 0x1f18 <evaluate.1302+0x80>
		if (op == '/') return a / b;
    1eee:	ef 32       	cpi	r30, 0x2F	; 47
    1ef0:	29 f4       	brne	.+10     	; 0x1efc <evaluate.1302+0x64>
    1ef2:	c9 01       	movw	r24, r18
    1ef4:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__udivmodhi4>
    1ef8:	cb 01       	movw	r24, r22
    1efa:	0e c0       	rjmp	.+28     	; 0x1f18 <evaluate.1302+0x80>
		if (op == '+') return a + b;
    1efc:	eb 32       	cpi	r30, 0x2B	; 43
    1efe:	21 f4       	brne	.+8      	; 0x1f08 <evaluate.1302+0x70>
    1f00:	c9 01       	movw	r24, r18
    1f02:	86 0f       	add	r24, r22
    1f04:	97 1f       	adc	r25, r23
    1f06:	08 c0       	rjmp	.+16     	; 0x1f18 <evaluate.1302+0x80>
		if (op == '-') return a - b;
    1f08:	ed 32       	cpi	r30, 0x2D	; 45
    1f0a:	19 f0       	breq	.+6      	; 0x1f12 <evaluate.1302+0x7a>
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	03 c0       	rjmp	.+6      	; 0x1f18 <evaluate.1302+0x80>
    1f12:	c9 01       	movw	r24, r18
    1f14:	86 1b       	sub	r24, r22
    1f16:	97 0b       	sbc	r25, r23
	// Function to evaluate the current stack
	void evaluate() {
		u16 b = numStack[--topNum];
		u16 a = numStack[--topNum];
		u8 op = operatorStack[--topOp];
		numStack[topNum++] = applyOperation(a, b, op);
    1f18:	e4 2f       	mov	r30, r20
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	ee 0f       	add	r30, r30
    1f1e:	ff 1f       	adc	r31, r31
    1f20:	ec 0f       	add	r30, r28
    1f22:	fd 1f       	adc	r31, r29
    1f24:	94 87       	std	Z+12, r25	; 0x0c
    1f26:	83 87       	std	Z+11, r24	; 0x0b
    1f28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f2a:	8f 5f       	subi	r24, 0xFF	; 255
    1f2c:	8f 8f       	std	Y+31, r24	; 0x1f
	}
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	3f 90       	pop	r3
    1f34:	2f 90       	pop	r2
    1f36:	08 95       	ret

00001f38 <KeyPadCalc>:
#include "../../HAL/KEYBAD/KEYBAD_Interface.h"
#include "../../HAL/LCD/LCD_Interface.h"
#include <util/delay.h>
#include "Calculation_Interface.h"

void KeyPadCalc(){
    1f38:	2f 92       	push	r2
    1f3a:	3f 92       	push	r3
    1f3c:	cf 92       	push	r12
    1f3e:	df 92       	push	r13
    1f40:	ff 92       	push	r15
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	a0 97       	sbiw	r28, 0x20	; 32
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
	u8 Key = NoKey;
	u16 num = 0;
	u16 numStack[10];
	u8 operatorStack[10];
	u8 topNum = 0;
    1f5a:	18 a2       	std	Y+32, r1	; 0x20
	u8 topOp = 0;
    1f5c:	1b 86       	std	Y+11, r1	; 0x0b
				operatorStack[topOp++] = Key;
			}

			// If the key is '=', evaluate the remaining operations
			if (Key == '=') {
				numStack[topNum++] = num;
    1f5e:	6e 01       	movw	r12, r28
    1f60:	08 94       	sec
    1f62:	c1 1c       	adc	r12, r1
    1f64:	d1 1c       	adc	r13, r1
	u8 Key = NoKey;
	u16 num = 0;
	u16 numStack[10];
	u8 operatorStack[10];
	u8 topNum = 0;
	u8 topOp = 0;
    1f66:	00 e0       	ldi	r16, 0x00	; 0
    1f68:	10 e0       	ldi	r17, 0x00	; 0
		u8 op = operatorStack[--topOp];
		numStack[topNum++] = applyOperation(a, b, op);
	}

	while (1) {
		Key = u8KeyPressed();
    1f6a:	0e 94 ef 0c 	call	0x19de	; 0x19de <u8KeyPressed>
    1f6e:	f8 2e       	mov	r15, r24
		if (Key != NoKey) {
    1f70:	84 e5       	ldi	r24, 0x54	; 84
    1f72:	f8 16       	cp	r15, r24
    1f74:	d1 f3       	breq	.-12     	; 0x1f6a <KeyPadCalc+0x32>
			LcdWriteData(Key);
    1f76:	8f 2d       	mov	r24, r15
    1f78:	0e 94 c6 0a 	call	0x158c	; 0x158c <LcdWriteData>

			// Form the number if the key is a digit
			if (Key >= '0' && Key <= '9') {
    1f7c:	8f 2d       	mov	r24, r15
    1f7e:	80 53       	subi	r24, 0x30	; 48
    1f80:	8a 30       	cpi	r24, 0x0A	; 10
    1f82:	70 f4       	brcc	.+28     	; 0x1fa0 <KeyPadCalc+0x68>
				num = (num * 10) + (Key - '0');
    1f84:	c8 01       	movw	r24, r16
    1f86:	e3 e0       	ldi	r30, 0x03	; 3
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	ea 95       	dec	r30
    1f8e:	e1 f7       	brne	.-8      	; 0x1f88 <KeyPadCalc+0x50>
    1f90:	00 0f       	add	r16, r16
    1f92:	11 1f       	adc	r17, r17
    1f94:	08 0f       	add	r16, r24
    1f96:	19 1f       	adc	r17, r25
    1f98:	00 53       	subi	r16, 0x30	; 48
    1f9a:	10 40       	sbci	r17, 0x00	; 0
    1f9c:	0f 0d       	add	r16, r15
    1f9e:	11 1d       	adc	r17, r1
			}

			// If the key is an operator (+, -, x, /)
			if (Key == '+' || Key == '-' || Key == 'x' || Key == '/') {
    1fa0:	8b e2       	ldi	r24, 0x2B	; 43
    1fa2:	f8 16       	cp	r15, r24
    1fa4:	49 f0       	breq	.+18     	; 0x1fb8 <KeyPadCalc+0x80>
    1fa6:	8d e2       	ldi	r24, 0x2D	; 45
    1fa8:	f8 16       	cp	r15, r24
    1faa:	31 f0       	breq	.+12     	; 0x1fb8 <KeyPadCalc+0x80>
    1fac:	88 e7       	ldi	r24, 0x78	; 120
    1fae:	f8 16       	cp	r15, r24
    1fb0:	19 f0       	breq	.+6      	; 0x1fb8 <KeyPadCalc+0x80>
    1fb2:	8f e2       	ldi	r24, 0x2F	; 47
    1fb4:	f8 16       	cp	r15, r24
    1fb6:	e1 f5       	brne	.+120    	; 0x2030 <KeyPadCalc+0xf8>
				// Push the current number to the stack
				numStack[topNum++] = num;
    1fb8:	88 a1       	ldd	r24, Y+32	; 0x20
    1fba:	e8 2f       	mov	r30, r24
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	ee 0f       	add	r30, r30
    1fc0:	ff 1f       	adc	r31, r31
    1fc2:	ec 0d       	add	r30, r12
    1fc4:	fd 1d       	adc	r31, r13
    1fc6:	14 87       	std	Z+12, r17	; 0x0c
    1fc8:	03 87       	std	Z+11, r16	; 0x0b
    1fca:	8f 5f       	subi	r24, 0xFF	; 255
    1fcc:	88 a3       	std	Y+32, r24	; 0x20
    1fce:	03 c0       	rjmp	.+6      	; 0x1fd6 <KeyPadCalc+0x9e>
				num = 0;

				// Evaluate previous operators with higher or equal precedence
				while (topOp > 0 && precedence(operatorStack[topOp - 1]) >= precedence(Key)) {
					evaluate();
    1fd0:	16 01       	movw	r2, r12
    1fd2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <evaluate.1302>
				// Push the current number to the stack
				numStack[topNum++] = num;
				num = 0;

				// Evaluate previous operators with higher or equal precedence
				while (topOp > 0 && precedence(operatorStack[topOp - 1]) >= precedence(Key)) {
    1fd6:	2b 85       	ldd	r18, Y+11	; 0x0b
    1fd8:	22 23       	and	r18, r18
    1fda:	11 f1       	breq	.+68     	; 0x2020 <KeyPadCalc+0xe8>
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e2 0f       	add	r30, r18
    1fe0:	f1 1d       	adc	r31, r1
    1fe2:	e0 81       	ld	r30, Z
	u8 topNum = 0;
	u8 topOp = 0;

	// Function to get the precedence of operators
	u8 precedence(u8 op) {
		if (op == 'x' || op == '/') {
    1fe4:	e8 37       	cpi	r30, 0x78	; 120
    1fe6:	49 f0       	breq	.+18     	; 0x1ffa <KeyPadCalc+0xc2>
    1fe8:	ef 32       	cpi	r30, 0x2F	; 47
    1fea:	39 f0       	breq	.+14     	; 0x1ffa <KeyPadCalc+0xc2>
			return 2; // Higher precedence
		} else if (op == '+' || op == '-') {
    1fec:	eb 32       	cpi	r30, 0x2B	; 43
    1fee:	19 f0       	breq	.+6      	; 0x1ff6 <KeyPadCalc+0xbe>
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	ed 32       	cpi	r30, 0x2D	; 45
    1ff4:	19 f4       	brne	.+6      	; 0x1ffc <KeyPadCalc+0xc4>
    1ff6:	91 e0       	ldi	r25, 0x01	; 1
    1ff8:	01 c0       	rjmp	.+2      	; 0x1ffc <KeyPadCalc+0xc4>
    1ffa:	92 e0       	ldi	r25, 0x02	; 2
	u8 topNum = 0;
	u8 topOp = 0;

	// Function to get the precedence of operators
	u8 precedence(u8 op) {
		if (op == 'x' || op == '/') {
    1ffc:	88 e7       	ldi	r24, 0x78	; 120
    1ffe:	f8 16       	cp	r15, r24
    2000:	51 f0       	breq	.+20     	; 0x2016 <KeyPadCalc+0xde>
    2002:	8f e2       	ldi	r24, 0x2F	; 47
    2004:	f8 16       	cp	r15, r24
    2006:	39 f0       	breq	.+14     	; 0x2016 <KeyPadCalc+0xde>
			return 2; // Higher precedence
		} else if (op == '+' || op == '-') {
    2008:	8b e2       	ldi	r24, 0x2B	; 43
    200a:	f8 16       	cp	r15, r24
    200c:	31 f0       	breq	.+12     	; 0x201a <KeyPadCalc+0xe2>
    200e:	8d e2       	ldi	r24, 0x2D	; 45
    2010:	f8 16       	cp	r15, r24
    2012:	f1 f6       	brne	.-68     	; 0x1fd0 <KeyPadCalc+0x98>
    2014:	02 c0       	rjmp	.+4      	; 0x201a <KeyPadCalc+0xe2>
    2016:	82 e0       	ldi	r24, 0x02	; 2
    2018:	01 c0       	rjmp	.+2      	; 0x201c <KeyPadCalc+0xe4>
    201a:	81 e0       	ldi	r24, 0x01	; 1
				// Push the current number to the stack
				numStack[topNum++] = num;
				num = 0;

				// Evaluate previous operators with higher or equal precedence
				while (topOp > 0 && precedence(operatorStack[topOp - 1]) >= precedence(Key)) {
    201c:	98 17       	cp	r25, r24
    201e:	c0 f6       	brcc	.-80     	; 0x1fd0 <KeyPadCalc+0x98>
					evaluate();
				}

				// Push the current operator to the stack
				operatorStack[topOp++] = Key;
    2020:	f6 01       	movw	r30, r12
    2022:	e2 0f       	add	r30, r18
    2024:	f1 1d       	adc	r31, r1
    2026:	f0 82       	st	Z, r15
    2028:	2f 5f       	subi	r18, 0xFF	; 255
    202a:	2b 87       	std	Y+11, r18	; 0x0b
    202c:	00 e0       	ldi	r16, 0x00	; 0
    202e:	10 e0       	ldi	r17, 0x00	; 0
			}

			// If the key is '=', evaluate the remaining operations
			if (Key == '=') {
    2030:	8d e3       	ldi	r24, 0x3D	; 61
    2032:	f8 16       	cp	r15, r24
    2034:	d9 f4       	brne	.+54     	; 0x206c <KeyPadCalc+0x134>
				numStack[topNum++] = num;
    2036:	88 a1       	ldd	r24, Y+32	; 0x20
    2038:	e8 2f       	mov	r30, r24
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	ee 0f       	add	r30, r30
    203e:	ff 1f       	adc	r31, r31
    2040:	ec 0d       	add	r30, r12
    2042:	fd 1d       	adc	r31, r13
    2044:	14 87       	std	Z+12, r17	; 0x0c
    2046:	03 87       	std	Z+11, r16	; 0x0b
    2048:	8f 5f       	subi	r24, 0xFF	; 255
    204a:	88 a3       	std	Y+32, r24	; 0x20
    204c:	03 c0       	rjmp	.+6      	; 0x2054 <KeyPadCalc+0x11c>

				// Evaluate all remaining operators
				while (topOp > 0) {
					evaluate();
    204e:	16 01       	movw	r2, r12
    2050:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <evaluate.1302>
			// If the key is '=', evaluate the remaining operations
			if (Key == '=') {
				numStack[topNum++] = num;

				// Evaluate all remaining operators
				while (topOp > 0) {
    2054:	8b 85       	ldd	r24, Y+11	; 0x0b
    2056:	88 23       	and	r24, r24
    2058:	d1 f7       	brne	.-12     	; 0x204e <KeyPadCalc+0x116>
					evaluate();
				}

				// Display the final result
				vSetCursor(2, 1);
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	61 e0       	ldi	r22, 0x01	; 1
    205e:	0e 94 89 0c 	call	0x1912	; 0x1912 <vSetCursor>
				vConvertNumbersToString(numStack[0]);
    2062:	8c 85       	ldd	r24, Y+12	; 0x0c
    2064:	9d 85       	ldd	r25, Y+13	; 0x0d
    2066:	0e 94 47 0b 	call	0x168e	; 0x168e <vConvertNumbersToString>
    206a:	06 c0       	rjmp	.+12     	; 0x2078 <KeyPadCalc+0x140>
				topNum = 0;
				topOp = 0;
			}

			// Clear the display if 'c' is pressed
			if (Key == 'c') {
    206c:	83 e6       	ldi	r24, 0x63	; 99
    206e:	f8 16       	cp	r15, r24
    2070:	09 f0       	breq	.+2      	; 0x2074 <KeyPadCalc+0x13c>
    2072:	7b cf       	rjmp	.-266    	; 0x1f6a <KeyPadCalc+0x32>
				vClearDisplay();
    2074:	0e 94 9f 0c 	call	0x193e	; 0x193e <vClearDisplay>
				num = 0;
				topNum = 0;
    2078:	18 a2       	std	Y+32, r1	; 0x20
				topOp = 0;
    207a:	1b 86       	std	Y+11, r1	; 0x0b
    207c:	74 cf       	rjmp	.-280    	; 0x1f66 <KeyPadCalc+0x2e>

0000207e <main>:

	}
}

int main(){
	vSetPinDirection(PORT_C,PIN_7,output);
    207e:	82 e0       	ldi	r24, 0x02	; 2
    2080:	67 e0       	ldi	r22, 0x07	; 7
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	vSetPinDirection(PORT_C,PIN_6,output);
    2088:	82 e0       	ldi	r24, 0x02	; 2
    208a:	66 e0       	ldi	r22, 0x06	; 6
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
	EEPROM_Init();
    2092:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <EEPROM_Init>
	LcdInit();
    2096:	0e 94 a7 0c 	call	0x194e	; 0x194e <LcdInit>
	vKeyPadInit();
    209a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <vKeyPadInit>
	u16 pass = 0;
	pass = u16password(10,12121);
    209e:	8a e0       	ldi	r24, 0x0A	; 10
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	69 e5       	ldi	r22, 0x59	; 89
    20a4:	7f e2       	ldi	r23, 0x2F	; 47
    20a6:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <u16password>
	vLcdWriteString("Enter password :");
    20aa:	8e eb       	ldi	r24, 0xBE	; 190
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 34 0b 	call	0x1668	; 0x1668 <vLcdWriteString>
	vSetCursor(2,1);
    20b2:	82 e0       	ldi	r24, 0x02	; 2
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	0e 94 89 0c 	call	0x1912	; 0x1912 <vSetCursor>
	if(vcheckpass()){
    20ba:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <vcheckpass>
    20be:	88 23       	and	r24, r24
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <main+0x46>
    20c2:	3c c0       	rjmp	.+120    	; 0x213c <main+0xbe>
    20c4:	88 e8       	ldi	r24, 0x88	; 136
    20c6:	93 e1       	ldi	r25, 0x13	; 19
    20c8:	20 e9       	ldi	r18, 0x90	; 144
    20ca:	31 e0       	ldi	r19, 0x01	; 1
    20cc:	f9 01       	movw	r30, r18
    20ce:	31 97       	sbiw	r30, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <main+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	d9 f7       	brne	.-10     	; 0x20cc <main+0x4e>
		_delay_ms(500);
		vClearDisplay();
    20d6:	0e 94 9f 0c 	call	0x193e	; 0x193e <vClearDisplay>
		vSetCursor(1,3);
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	63 e0       	ldi	r22, 0x03	; 3
    20de:	0e 94 89 0c 	call	0x1912	; 0x1912 <vSetCursor>
		vLcdWriteString("Welcome to");
    20e2:	8f ec       	ldi	r24, 0xCF	; 207
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	0e 94 34 0b 	call	0x1668	; 0x1668 <vLcdWriteString>
		vSetCursor(2,3);
    20ea:	82 e0       	ldi	r24, 0x02	; 2
    20ec:	63 e0       	ldi	r22, 0x03	; 3
    20ee:	0e 94 89 0c 	call	0x1912	; 0x1912 <vSetCursor>
		vLcdWriteString(" your Home");
    20f2:	8a ed       	ldi	r24, 0xDA	; 218
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	0e 94 34 0b 	call	0x1668	; 0x1668 <vLcdWriteString>
		vADCInit();
    20fa:	0e 94 0c 0a 	call	0x1418	; 0x1418 <vADCInit>
		vEnableADC();
    20fe:	0e 94 08 0a 	call	0x1410	; 0x1410 <vEnableADC>
		vEnable_EXTI(EXTI0);
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	0e 94 cb 07 	call	0xf96	; 0xf96 <vEnable_EXTI>
		vMod_EXTI(EXTI0,LOGIC_CHANGE);
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	61 e0       	ldi	r22, 0x01	; 1
    210c:	0e 94 ef 07 	call	0xfde	; 0xfde <vMod_EXTI>
		ENABLE_GIE();
    2110:	0e 94 c3 07 	call	0xf86	; 0xf86 <ENABLE_GIE>
		vSetLedDirections();
    2114:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <vSetLedDirections>
    2118:	80 ed       	ldi	r24, 0xD0	; 208
    211a:	97 e0       	ldi	r25, 0x07	; 7
    211c:	20 e9       	ldi	r18, 0x90	; 144
    211e:	31 e0       	ldi	r19, 0x01	; 1
    2120:	f9 01       	movw	r30, r18
    2122:	31 97       	sbiw	r30, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <main+0xa4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2126:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2128:	d9 f7       	brne	.-10     	; 0x2120 <main+0xa2>
		_delay_ms(200);
		vSetPinDirection(PORT_D,PIN_5,output);
    212a:	83 e0       	ldi	r24, 0x03	; 3
    212c:	65 e0       	ldi	r22, 0x05	; 5
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	0e 94 3e 08 	call	0x107c	; 0x107c <vSetPinDirection>
		SERVO_ANGLE(125); // for 90 degree angle
    2134:	8d e7       	ldi	r24, 0x7D	; 125
    2136:	0e 94 26 0a 	call	0x144c	; 0x144c <SERVO_ANGLE>
    213a:	04 c0       	rjmp	.+8      	; 0x2144 <main+0xc6>
	}else{
		vLcdWriteString("Access Denied");
    213c:	85 ee       	ldi	r24, 0xE5	; 229
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	0e 94 34 0b 	call	0x1668	; 0x1668 <vLcdWriteString>

	}

	while(1){
		u8CalculateTemperature();
    2144:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <u8CalculateTemperature>
		vCheckTemp();
    2148:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <vCheckTemp>
    214c:	fb cf       	rjmp	.-10     	; 0x2144 <main+0xc6>

0000214e <__vector_1>:
#include "../HAL/EEPROM/EEPROM_Interface.h"
#include "../MCAL/I2C/I2C_Interface.h"
#include "../HAL/ServoMotor/ServoMotor_Interface.h"
#include <util/delay.h>
#include <avr/interrupt.h>
ISR(INT0_vect){
    214e:	1f 92       	push	r1
    2150:	0f 92       	push	r0
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	0f 92       	push	r0
    2156:	11 24       	eor	r1, r1
    2158:	2f 93       	push	r18
    215a:	3f 93       	push	r19
    215c:	4f 93       	push	r20
    215e:	5f 93       	push	r21
    2160:	6f 93       	push	r22
    2162:	7f 93       	push	r23
    2164:	8f 93       	push	r24
    2166:	9f 93       	push	r25
    2168:	af 93       	push	r26
    216a:	bf 93       	push	r27
    216c:	ef 93       	push	r30
    216e:	ff 93       	push	r31
	if(u8DigitalFlameRead()){
    2170:	0e 94 a0 0a 	call	0x1540	; 0x1540 <u8DigitalFlameRead>
    2174:	88 23       	and	r24, r24
    2176:	49 f0       	breq	.+18     	; 0x218a <__vector_1+0x3c>
		vPinValue(PORT_C,PIN_7,HIGH);// TURN ON BUZZER
    2178:	82 e0       	ldi	r24, 0x02	; 2
    217a:	67 e0       	ldi	r22, 0x07	; 7
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
		vPinValue(PORT_C,PIN_6,HIGH);// TURN ON PUMP
    2182:	82 e0       	ldi	r24, 0x02	; 2
    2184:	66 e0       	ldi	r22, 0x06	; 6
    2186:	41 e0       	ldi	r20, 0x01	; 1
    2188:	08 c0       	rjmp	.+16     	; 0x219a <__vector_1+0x4c>

	}else{
		vPinValue(PORT_C,PIN_7,LOW);
    218a:	82 e0       	ldi	r24, 0x02	; 2
    218c:	67 e0       	ldi	r22, 0x07	; 7
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>
		vPinValue(PORT_C,PIN_6,LOW);
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	66 e0       	ldi	r22, 0x06	; 6
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	0e 94 b2 08 	call	0x1164	; 0x1164 <vPinValue>

	}
}
    219e:	ff 91       	pop	r31
    21a0:	ef 91       	pop	r30
    21a2:	bf 91       	pop	r27
    21a4:	af 91       	pop	r26
    21a6:	9f 91       	pop	r25
    21a8:	8f 91       	pop	r24
    21aa:	7f 91       	pop	r23
    21ac:	6f 91       	pop	r22
    21ae:	5f 91       	pop	r21
    21b0:	4f 91       	pop	r20
    21b2:	3f 91       	pop	r19
    21b4:	2f 91       	pop	r18
    21b6:	0f 90       	pop	r0
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	0f 90       	pop	r0
    21bc:	1f 90       	pop	r1
    21be:	18 95       	reti

000021c0 <__mulsi3>:
    21c0:	62 9f       	mul	r22, r18
    21c2:	d0 01       	movw	r26, r0
    21c4:	73 9f       	mul	r23, r19
    21c6:	f0 01       	movw	r30, r0
    21c8:	82 9f       	mul	r24, r18
    21ca:	e0 0d       	add	r30, r0
    21cc:	f1 1d       	adc	r31, r1
    21ce:	64 9f       	mul	r22, r20
    21d0:	e0 0d       	add	r30, r0
    21d2:	f1 1d       	adc	r31, r1
    21d4:	92 9f       	mul	r25, r18
    21d6:	f0 0d       	add	r31, r0
    21d8:	83 9f       	mul	r24, r19
    21da:	f0 0d       	add	r31, r0
    21dc:	74 9f       	mul	r23, r20
    21de:	f0 0d       	add	r31, r0
    21e0:	65 9f       	mul	r22, r21
    21e2:	f0 0d       	add	r31, r0
    21e4:	99 27       	eor	r25, r25
    21e6:	72 9f       	mul	r23, r18
    21e8:	b0 0d       	add	r27, r0
    21ea:	e1 1d       	adc	r30, r1
    21ec:	f9 1f       	adc	r31, r25
    21ee:	63 9f       	mul	r22, r19
    21f0:	b0 0d       	add	r27, r0
    21f2:	e1 1d       	adc	r30, r1
    21f4:	f9 1f       	adc	r31, r25
    21f6:	bd 01       	movw	r22, r26
    21f8:	cf 01       	movw	r24, r30
    21fa:	11 24       	eor	r1, r1
    21fc:	08 95       	ret

000021fe <__udivmodhi4>:
    21fe:	aa 1b       	sub	r26, r26
    2200:	bb 1b       	sub	r27, r27
    2202:	51 e1       	ldi	r21, 0x11	; 17
    2204:	07 c0       	rjmp	.+14     	; 0x2214 <__udivmodhi4_ep>

00002206 <__udivmodhi4_loop>:
    2206:	aa 1f       	adc	r26, r26
    2208:	bb 1f       	adc	r27, r27
    220a:	a6 17       	cp	r26, r22
    220c:	b7 07       	cpc	r27, r23
    220e:	10 f0       	brcs	.+4      	; 0x2214 <__udivmodhi4_ep>
    2210:	a6 1b       	sub	r26, r22
    2212:	b7 0b       	sbc	r27, r23

00002214 <__udivmodhi4_ep>:
    2214:	88 1f       	adc	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	5a 95       	dec	r21
    221a:	a9 f7       	brne	.-22     	; 0x2206 <__udivmodhi4_loop>
    221c:	80 95       	com	r24
    221e:	90 95       	com	r25
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	08 95       	ret

00002226 <__divmodhi4>:
    2226:	97 fb       	bst	r25, 7
    2228:	09 2e       	mov	r0, r25
    222a:	07 26       	eor	r0, r23
    222c:	0a d0       	rcall	.+20     	; 0x2242 <__divmodhi4_neg1>
    222e:	77 fd       	sbrc	r23, 7
    2230:	04 d0       	rcall	.+8      	; 0x223a <__divmodhi4_neg2>
    2232:	e5 df       	rcall	.-54     	; 0x21fe <__udivmodhi4>
    2234:	06 d0       	rcall	.+12     	; 0x2242 <__divmodhi4_neg1>
    2236:	00 20       	and	r0, r0
    2238:	1a f4       	brpl	.+6      	; 0x2240 <__divmodhi4_exit>

0000223a <__divmodhi4_neg2>:
    223a:	70 95       	com	r23
    223c:	61 95       	neg	r22
    223e:	7f 4f       	sbci	r23, 0xFF	; 255

00002240 <__divmodhi4_exit>:
    2240:	08 95       	ret

00002242 <__divmodhi4_neg1>:
    2242:	f6 f7       	brtc	.-4      	; 0x2240 <__divmodhi4_exit>
    2244:	90 95       	com	r25
    2246:	81 95       	neg	r24
    2248:	9f 4f       	sbci	r25, 0xFF	; 255
    224a:	08 95       	ret

0000224c <__udivmodsi4>:
    224c:	a1 e2       	ldi	r26, 0x21	; 33
    224e:	1a 2e       	mov	r1, r26
    2250:	aa 1b       	sub	r26, r26
    2252:	bb 1b       	sub	r27, r27
    2254:	fd 01       	movw	r30, r26
    2256:	0d c0       	rjmp	.+26     	; 0x2272 <__udivmodsi4_ep>

00002258 <__udivmodsi4_loop>:
    2258:	aa 1f       	adc	r26, r26
    225a:	bb 1f       	adc	r27, r27
    225c:	ee 1f       	adc	r30, r30
    225e:	ff 1f       	adc	r31, r31
    2260:	a2 17       	cp	r26, r18
    2262:	b3 07       	cpc	r27, r19
    2264:	e4 07       	cpc	r30, r20
    2266:	f5 07       	cpc	r31, r21
    2268:	20 f0       	brcs	.+8      	; 0x2272 <__udivmodsi4_ep>
    226a:	a2 1b       	sub	r26, r18
    226c:	b3 0b       	sbc	r27, r19
    226e:	e4 0b       	sbc	r30, r20
    2270:	f5 0b       	sbc	r31, r21

00002272 <__udivmodsi4_ep>:
    2272:	66 1f       	adc	r22, r22
    2274:	77 1f       	adc	r23, r23
    2276:	88 1f       	adc	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	1a 94       	dec	r1
    227c:	69 f7       	brne	.-38     	; 0x2258 <__udivmodsi4_loop>
    227e:	60 95       	com	r22
    2280:	70 95       	com	r23
    2282:	80 95       	com	r24
    2284:	90 95       	com	r25
    2286:	9b 01       	movw	r18, r22
    2288:	ac 01       	movw	r20, r24
    228a:	bd 01       	movw	r22, r26
    228c:	cf 01       	movw	r24, r30
    228e:	08 95       	ret

00002290 <__prologue_saves__>:
    2290:	2f 92       	push	r2
    2292:	3f 92       	push	r3
    2294:	4f 92       	push	r4
    2296:	5f 92       	push	r5
    2298:	6f 92       	push	r6
    229a:	7f 92       	push	r7
    229c:	8f 92       	push	r8
    229e:	9f 92       	push	r9
    22a0:	af 92       	push	r10
    22a2:	bf 92       	push	r11
    22a4:	cf 92       	push	r12
    22a6:	df 92       	push	r13
    22a8:	ef 92       	push	r14
    22aa:	ff 92       	push	r15
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	ca 1b       	sub	r28, r26
    22ba:	db 0b       	sbc	r29, r27
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	09 94       	ijmp

000022c8 <__epilogue_restores__>:
    22c8:	2a 88       	ldd	r2, Y+18	; 0x12
    22ca:	39 88       	ldd	r3, Y+17	; 0x11
    22cc:	48 88       	ldd	r4, Y+16	; 0x10
    22ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    22d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    22d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    22d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    22d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    22d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    22da:	b9 84       	ldd	r11, Y+9	; 0x09
    22dc:	c8 84       	ldd	r12, Y+8	; 0x08
    22de:	df 80       	ldd	r13, Y+7	; 0x07
    22e0:	ee 80       	ldd	r14, Y+6	; 0x06
    22e2:	fd 80       	ldd	r15, Y+5	; 0x05
    22e4:	0c 81       	ldd	r16, Y+4	; 0x04
    22e6:	1b 81       	ldd	r17, Y+3	; 0x03
    22e8:	aa 81       	ldd	r26, Y+2	; 0x02
    22ea:	b9 81       	ldd	r27, Y+1	; 0x01
    22ec:	ce 0f       	add	r28, r30
    22ee:	d1 1d       	adc	r29, r1
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	ed 01       	movw	r28, r26
    22fc:	08 95       	ret

000022fe <_exit>:
    22fe:	f8 94       	cli

00002300 <__stop_program>:
    2300:	ff cf       	rjmp	.-2      	; 0x2300 <__stop_program>
